package jobsrv;
import "protocols/net.proto";
import "protocols/originsrv.proto";

enum Os {
  Linux = 1;
  Darwin = 2;
  Windows = 3;
}

enum WorkerState {
  Ready = 0;
  Busy = 1;
}

enum JobState {
  Pending = 0;
  Processing = 1;
  Complete = 2;
  Rejected = 3;
  Failed = 4;
  Dispatched = 5;
}

message Heartbeat {
  optional string endpoint = 1;
  optional Os os = 2;
  optional WorkerState state = 3;
}

message Job {
  reserved 10;
  reserved "log_url";
  optional uint64 id = 1;
  optional uint64 owner_id = 2;
  optional JobState state = 3;
  optional originsrv.OriginProject project = 4;
  optional net.NetError error = 5;
  // The RFC3339-formatted time the job was entered into the
  // system. It may not begin processing for some time after this,
  // based on current system load.
  optional string created_at = 6;
  // The RFC3339-formatted time the `hab studio build` process
  // started.
  optional string build_started_at = 7;
  // The RFC3339-formatted time the `hab studio build` process
  // stopped, successful or not.
  optional string build_finished_at = 8;
  // The identifier of the package built by the job. Set only a
  // successfully-built Job.
  optional originsrv.OriginPackageIdent package_ident = 9;
  // Whether or not the log for the job has been archived
  optional bool is_archived = 11;
}

// Retrieve a single job by ID
message JobGet {
  optional uint64 id = 1;
}

message JobSpec {
  optional uint64 owner_id = 1;
  optional originsrv.OriginProject project = 2;
}

// Retrieve jobs for a specific project.
//
// Currently retrieves 50 most recent; additional filtering and
// sorting comes later.
message ProjectJobsGet {
  // The origin-qualified name of a project, e.g. "core/nginx"
  optional string name = 1;
}

message ProjectJobsGetResponse {
  repeated Job jobs = 1;
}

// Sent from a worker to the job server's log ingester during a build.
message JobLogChunk {
  optional uint64 job_id = 1;
 // Ordering of this chunk in the overall log output, starting at 1;
 // We currently send one line at a time, so this corresponds to line
 // number.
  optional uint64 seq = 2;
  // The log content being sent
  // TODO: Make this a repeated field for future compatibility
  optional string content = 3;
}

// Sent from a worker to the job server's log ingester when a build is
// complete.
message JobLogComplete {
  optional uint64 job_id = 1;
}

// Initiated by API request to retrieve a portion of a job's log data,
// beginning at line `start`
message JobLogGet {
  optional uint64 id = 1;
  // Zero-indexed line of the log output to start with
  optional uint64 start = 2;
}

// Sent in reply to a JobLogGet
message JobLog {
  // Zero-indexed (inclusive) line of the log output in `content`
  optional uint64 start = 1;
  // Zero-indexed (exclusive) line of the log output in `content`
  optional uint64 stop = 2;
  // Lines of log output
  repeated string content = 3;
  // While we need to poll for logs, this serves as an indicator to
  // clients if they need to continue polling to receive more logs, or
  // can stop.
  optional bool is_complete = 4;
}
