/// Messages sent to an EventSrv from a Habitat Supervisor.
package habitat.eventsrv;

syntax = "proto2";

/// The base for all messages generated by an EventSrv. This message contains framing
/// to hint to a consumer how to encode/decode the message's payload and information for
/// how to route or index the message.
message EventEnvelope {
  /// Enumerator of potential encoding types for the Envelope's payload
  enum Type {
    /// Encoded with a Google Protobuf
    ProtoBuf = 1;
    /// Encoded with JSON
    JSON = 2;
    /// Encoded with TOML
    TOML = 3;
  }

  /// Message payload hint to a decoder
  optional Type type = 1;
  /// Contents of message
  optional bytes payload = 2;
  /// Time of message origination
  optional uint64 timestamp = 3;
  /// Member-ID of originating Supervisor
  optional string member_id = 4;
  /// Service name of originating Supervisor service
  optional string service = 5;
  /// Supervisor's incarnation at message origination
  optional uint64 incarnation = 6;
  /// Message's sequence ID
  optional uint64 sequence_id = 7;
}

/// System information generated by the Supervisor of the machine it is running on.
message SysInfo {
  /// Public facing IP address of Supervisor
  optional string ip = 1;
  /// Network hostname of Supervisor
  optional string hostname = 2;
  /// Listening address for Supervisor's gossip connection
  optional string gossip_ip = 3;
  /// Listening port for Supervisor's gossip connection
  optional string gossip_port = 4;
  /// Listening address for Supervisor's http gateway
  optional string http_gateway_ip = 5;
  /// Listening port for Supervisor's http gateway
  optional string http_gateway_port = 6;
}

/// Information describing the package a service is running.
message PackageIdent {
  /// Origin name of package
  optional string origin = 1;
  /// Software name of package
  optional string name = 2;
  /// Software version of package
  optional string version = 3;
  /// Build release timestamp of package
  optional string release = 4;
}

/// Generated by gossip information from Supervisors representing a single member of the Census.
message CensusEntry {
  /// Member-ID of originating Supervisor
  optional string member_id = 1;
  /// Service name
  optional string service = 2;
  /// Service group name
  optional string group = 3;
  /// Service group organization name
  optional string org = 4;
  /// Gossiped configuration of service
  optional bytes cfg = 5;
  /// System information of Supervisor
  optional SysInfo sys = 6;
  /// Package information of service
  optional PackageIdent pkg = 7;
  /// `true` if this service instance is the leader when in a leader topology
  optional bool leader = 8;
  /// `true` if this service instance is a follower when in a leader topology
  optional bool follower = 9;
  /// `true` if this service instance is the update leader when in a coordinated update topology
  optional bool update_leader = 10;
  /// `true` if this service instance is an update leader when in a coordinated update topology
  optional bool update_follower = 11;
  /// `true` if this service instance is part of a topology and an election is currently under way
  optional bool election_is_running = 12;
  /// `true` if this service instance is part of a topology and an election is currently under way
  /// but has come to a stop because a quorum cannot be met
  optional bool election_is_no_quorum = 13;
  /// `true` if this service instance is part of a topology and an election is finished
  optional bool election_is_finished = 14;
  /// `true` if this service instance is part of an update topology and an election is currently
  /// under way
  optional bool update_election_is_running = 15;
  /// `true` if this service instance is part of an update topology and an election is currently
  /// under way but has come to a stop because a quorum cannot be met
  optional bool update_election_is_no_quorum = 16;
  /// `true` if this service instance is part of an update topology and an election is finished
  optional bool update_election_is_finished = 17;
  /// `true` if the service has successfully initialized
  optional bool initialized = 18;
  /// `true` if the service is alive
  optional bool alive = 19;
  /// `true` if the service is suspected to be dead
  optional bool suspect = 20;
  /// `true` if the service is confirmed to be dead
  optional bool confirmed = 21;
  /// `true` if the originating Supervisor is a permanent peer
  optional bool persistent = 22;
  /// `true` if the service is marked as departed
  optional bool departed = 23;
}
