#%RAML 0.8
---
title: Builder API
version: v1

baseUri: https://{rootUri}/{version}
baseUriParameters:
    rootUri:
        description: |
            The root URI for the particular installation of Builder
        example: localhost:9636
mediaType: application/json
schemas:
    - origin: |
        {
            "properties": {
                "id": {
                    "type": "integer",
                    "required": false
                },
                "name": {
                    "type": "string",
                    "required": false
                },
                "owner_id": {
                    "type": "string",
                    "required": false
                },
                "default_package_visibility": {
                    "type": "string",
                    "enum": ["Public", "Private"],
                    "required": false
                }
            }
        }
    - secret_key: |
        {
            "properties": {
                "id": {
                    "type": "string",
                    "required": true
                },
                "origin_id": {
                    "type": "string",
                    "required": true
                },
                "name": {
                    "type": "string",
                    "required": true
                },
                "revision": {
                    "type": "string",
                    "required": true
                },
                "body": {
                    "type": "string",
                    "required": true
                },
                "owner_id": {
                    "type": "string",
                    "required": true
                }
            }
        }
securitySchemes:
    - oauth_2_0:
        description: Builder supports OAuth 2.0 for authenticating all API requests.
        type: OAuth 2.0
        describedBy:
            headers:
                Authorization: &authorization
                    description: Used to send a valid OAuth 2 access token.
                    example: |
                        Authorization: Bearer 0b79bab50daca910b000d4f1a2b675d604257e42
            responses:
                401: &resp401
                    description: |
                        Bad or expired token. To fix, you should re-authenticate the user.
                403: &resp403
                    description: |
                        Bad OAuth request. Regenerate your token and try again.
        settings:
            authorizationUri: https://{rootUri}/oauth2/authorize
            accessTokenUri: https://{rootUri}/oauth2/token
            authorizationGrants: [ token ]

/origins:
    post:
        description: Create a new origin
        securedBy: [oauth_2_0]
        body:
            application/json:
                schema: origin
                example: |
                    {
                        "name": "reset",
                        "default_package_visibility": "public"
                    }
        responses:
            200:
                body:
                    application/json:
                        schema: origin
                        example: |
                            {
                                "id": "77732030103691265",
                                "name": "reset",
                                "owner_id": "77730215748435968",
                                "default_package_visibility": "public"
                            }
            409:
                description: The origin already exists
            422:
                description: Malformed origin in request body
    /{origin}:
        /users:
            /{username}:
                /invitations:
                    post:
                        description: Create an invitation to this origin for this user
                        securedBy: [oauth_2_0]
                        responses:
                            201:
                                description: Invitation created successfully
                            204:
                                description: Invitation creation request received
                            400:
                                description: No origin or username given
                            401:
                                description: You are not authorized to send invitations on behalf of this origin
                            500:
                                description: Internal server error

        /integrations:
            get:
                description: Get an object of all integrations
                securedBy: [oauth_2_0]
                responses:
                    200:
                        body:
                            application/json:
                                example: |
                                    {
                                        "docker": ["region1", "region2"],
                                        "google": ["region3"]
                                    }
            /{integrationName}:
                /default:
                    put:
                        description: Create or update an origin project integration
                        securedBy: [oauth_2_0]
                        responses:
                            204:
                                body:
                                    application/json:
                                        example: |
                                            {
                                                "docker_hub_repo_name": "myorg/myrepo",
                                                "custom_tag": "some-tag",
                                                "latest_tag": true,
                                                "version_tag": false,
                                                "version_release_tag": true
                                            }
                            500:
                                description: Internal server error
                    delete:
                        description: Delete an origin project integration
                        securedBy: [oauth_2_0]
                        responses:
                            204:
                                description: Integration deleted
                            500:
                                description: Internal server error
        /invitations:
            /{invitationId}:
                put:
                    description: Accept this invitation
                    securedBy: [oauth_2_0]
                    responses:
                        204:
                            description: Accepted the invitation
                        400:
                            description: No origin or invitation id given
                        500:
                            description: Internal server error
                delete:
                    description: Rescind an invitation that hasn't already been ignored
                    securedBy: [oauth_2_0]
                    responses:
                        204:
                            description: Invitation rescinded
                        400:
                            description: No origin or invitation id given
                        500:
                            description: Internal server error
                /ignore:
                    put:
                        description: Ignore this invitation
                        securedBy: [oauth_2_0]
                        responses:
                            204:
                                description: Invitation ignored
                            400:
                                description: No origin or invitation id given
                            500:
                                description: Internal server error
    /{originId}:
        get:
            body:
                application/json:
                    schema: origin
                    example: |
                        {
                            "id": "77732030103691265",
                            "name": "reset",
                            "owner_id": "77730215748435968"
                            "default_package_visibility": "public"
                        }
        /keys:
            get:
                description: Return a list of key revisions for an organization.
                responses:
                    200:
                        body:
                            application/json:
                                example: |
                                    [
                                        {
                                            "origin": "core",
                                            "revision": "20160423193732",
                                            "location": "/origins/core/keys/20160423193732"
                                        },
                                        {
                                            "origin": "core",
                                            "revision": "20160423193733",
                                            "location": "/origins/core/keys/20160423193733"
                                        }
                                    ]
            /{revision}:
                get:
                    description: Get a key revision for a specific origin
                    responses:
                        200:
                            body:
                                text/plain:
                                    example: |
                                        SIG-PUB-1
                                        core-20160423193745

                                        Jpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc=
                post:
                    description: Upload a new key revision for an origin
                    securedBy: [oauth_2_0]
                    body:
                        text/plain:
                            example: |
                                SIG-PUB-1
                                core-20160423193745

                                Jpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc=
                    responses:
                        201:
                            description: Key successfully uploaded
                        403:
                            description: Authenticated user not a member of the given Origin
                        409:
                            description: Key already exists in Origin
        /secret_keys:
            /latest:
                get:
                    description: Retrieve the latest secret key
                    responses:
                        200:
                            body:
                                application/json:
                                    schema: secret_key
                                    example: |
                                        {
                                            "id": "",
                                            "origin_id": "",
                                            "name": "",
                                            "revision": "",
                                            "body": "",
                                            "owner_id": ""
                                        }
                        409:
                            description: Secret key already exists in origin
        /users:
            get:
                description: List all members of an origin
                responses:
                    200:
                        body:
                            application/json:
                                example: |
                                    {
                                        "members": [
                                            "reset"
                                        ],
                                        "origin_id": "77731431660388352"
                                    }
/pkgs:
    /search:
        /{query}:
            get:
                description: Search for packages with a query string
                queryParameters:
                    distinct:
                        description: Whether to show a distinct list of packages or not
                        type: boolean
                        required: false
                        default: false
                        example: true
                responses:
                    200:
                        description: Packages were found and fit on one page
                    206:
                        description: Packages were found and require pagination
                    500:
                        description: Internal server error
    /{origin}:
        get:
            description: List packages for an origin
            queryParameters:
                distinct:
                    description: Whether to show a distinct list of packages or not
                    type: boolean
                    required: false
                    default: false
                    example: true
            responses:
                200:
                400:
                404:
                500:
        /{name}:
            get:
                description: TODO
                responses:
                    200:
                    400:
                    404:
                    500:
            /versions:
                get:
                    description: Returns all versions and a count of releases for each version for a given package
                    responses:
                        200:
                            body:
                                application/json:
                                    example: |
                                        [{"origin":"core","name":"redis","version":"3.2.1","release_count":"3", "latest": "20170215222111"}]
                        400:
                            description: Origin or package name not supplied
                        404:
                            description: Package not found
                        500:
                            description: Server error
            /latest:
                get:
                    description: TODO
                    responses:
                        200:
                        404:
                        500:
            /{version}:
                get:
                    description: TODO
                    responses:
                        200:
                        400:
                        404:
                        500:
                /latest:
                    get:
                        responses:
                            200:
                            404:
                            500:
                /{release}:
                    get:
                        responses:
                            200:
                            404:
                            500:
                    post:
                        responses:
                            200:
                            400:
                            422:
                            424:
                            409:
                    /{visibility}:
                        patch:
                            description: Change the visibility of a package
                            responses:
                                200:
                                    description: Successfully changed
                                400:
                                    description: Missing origin or name or version or release or visibility. Visibility not "public" or "private".
                                403:
                                    description: Unauthorized to change packages for this origin
                                404:
                                    description: Package not found
                                500:
                                    description: Internal server error
                    /download:
                        get:
                            responses:
                                200:
                                400:
                                500:
                    /channels:
                        get:
                            responses:
                                200:
                                    body:
                                        application/json:
                                            example: |
                                                ["stable", "unstable"]
                                400:
                                    description: Package identifier is not fully qualified
                                404:
                                    description: Specified package could not be found
                                500:
                                    description: Internal server error
/channels:
    /{origin}:
        get:
            description: List all channels for an origin
            responses:
                200:
                    body:
                        application/json:
                            example: |
                                ["stable", "unstable"]
                400:
                    description: Origin not specified
        /{channel}:
            post:
                description: Create a channel
                responses:
                    201:
                        description: Channel successfully created
                    400:
                        description: Origin or channel not supplied
                    404:
                        description: Origin does not exist
                    409:
                        description: Channel already exists
                    500:
                        description: Server error
            delete:
                description: Deletes a channel
                responses:
                    200:
                        description: Channel successfully deleted
                    400:
                        description: Origin or channel not supplied
                    403:
                        description: Channel can not be deleted
                    500:
                        description: Server error
            /pkgs:
                get:
                    description: List all packages in a channel
                    responses:
                        200:
                            description: Returns a list of packages
                            body:
                                application/json:
                                    example: |
                                        {
                                            "range_start": 0,
                                            "range_end": 49,
                                            "total_count": 8,
                                            "data": [
                                                {
                                                    "origin": "core",
                                                    "name": "glibc",
                                                    "version": "2.22",
                                                    "release": "20160612063629"
                                                },
                                                {
                                                    "origin": "core",
                                                    "name": "linux-headers",
                                                    "version": "4.3",
                                                    "release": "20160612063537"
                                                }
                                            ]
                                        }
                        400:
                            description: Origin or channel not supplied
                        404:
                            description: Origin or channel does not exist
                        500:
                            description: Server error
                /{pkg}:
                    get:
                        description: List all packages in a channel that match the specified identifier
                        responses:
                            200:
                                description: Returns a list of packages
                            400:
                                description: Origin or channel not supplied
                            404:
                                description: Origin or channel does not exist
                            500:
                                description: Server error
                    /latest:
                        get:
                            description: Get the latest version of the package in this channel that matches the specified identifier
                            responses:
                                200:
                                    description: Returns a package
                                    body:
                                        application/json:
                                            example: |
                                                {
                                                    "checksum":"7a998b6a756f7ca769ac75edf66c119d14aa911d7cfb5fd91ad3ff21ddf0d257",
                                                    "config":"",
                                                    "deps":[
                                                        {
                                                            "name":"glibc",
                                                            "origin":"core",
                                                            "release":"20160612063629",
                                                            "version":"2.22"
                                                        }
                                                    ],
                                                    "exposes":[

                                                    ],
                                                    "ident":{
                                                        "name":"tree",
                                                        "origin":"core",
                                                        "release":"20161102210957",
                                                        "version":"1.7.0"
                                                    },
                                                    "manifest":"# core / tree\n\n\n* __Maintainer__: The Habitat Maintainers <humans@habitat.sh>\n* __Version__: 1.7.0\n* __Release__: 20161102210957\n* __Architecture__: x86_64\n* __System__: linux\n* __Target__: x86_64-linux\n* __Upstream URL__: upstream project's website or home page is not defined\n* __License__: gplv2+ \n* __Source__: [http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz](http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz)\n* __SHA__: `6957c20e82561ac4231638996e74f4cfa4e6faabc5a2f511f0b4e3940e8f7b12`\n* __Path__: `/hab/pkgs/core/tree/1.7.0/20161102210957`\n* __Build Dependencies__: `core/make core/gcc `\n* __Dependencies__: `core/glibc `\n* __Interpreters__: no interpreters or undefined\n\n# Plan\n\n## Build Flags\n\n```bash\nCFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include\nCPPFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include\nCXXFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include\nLDFLAGS: -L/hab/pkgs/core/glibc/2.22/20160612063629/lib -L/hab/pkgs/core/gcc/5.2.0/20161031031637/lib\nLD_RUN_PATH: /hab/pkgs/core/tree/1.7.0/20161102210957/lib:/hab/pkgs/core/glibc/2.22/20160612063629/lib\n```\n\n## Plan Source\n\n```bash\npkg_name=tree\npkg_origin=core\npkg_version=1.7.0\npkg_maintainer=\"The Habitat Maintainers <humans@habitat.sh>\"\npkg_license=('gplv2+')\npkg_source=http://mama.indstate.edu/users/ice/tree/src/tree-${pkg_version}.tgz\npkg_shasum=6957c20e82561ac4231638996e74f4cfa4e6faabc5a2f511f0b4e3940e8f7b12\npkg_deps=(core/glibc)\npkg_build_deps=(core/make core/gcc)\npkg_bin_dirs=(bin)\npkg_include_dirs=(include)\npkg_lib_dirs=(lib)\n\ndo_build() {\n  make\n}\n\ndo_install() {\n  sed -i \"s#prefix = /usr#prefix = ${pkg_prefix}#\" Makefile\n  make install\n}\n```",
                                                    "tdeps":[
                                                        {
                                                            "name":"glibc",
                                                            "origin":"core",
                                                            "release":"20160612063629",
                                                            "version":"2.22"
                                                        },
                                                        {
                                                            "name":"linux-headers",
                                                            "origin":"core",
                                                            "release":"20160612063537",
                                                            "version":"4.3"
                                                        }
                                                    ]
                                                }
                                400:
                                    description: Origin or channel or identifier not supplied
                                404:
                                    description: Origin or channel does not exist
                                500:
                                    description: Server error
                    /{version}:
                        get:
                            description: List all packages in a channel that match the specified identifier and version
                            responses:
                                200:
                                    description: Returns a list of packages
                                400:
                                    description: Origin or channel or identifier or version not supplied
                                404:
                                    description: Origin or channel does not exist
                                500:
                                    description: Server error
                        /latest:
                            get:
                                description: Get the latest version of the package in this channel that matches the specified identifier and version
                                responses:
                                    200:
                                        description: Returns a package
                                    400:
                                        description: Origin or channel or identifier or version not supplied
                                    404:
                                        description: Origin or channel does not exist
                                    500:
                                        description: Server error
                        /{release}:
                            get:
                                description: Get the package in a channel that matches the specified identifier, version and release
                                responses:
                                    200:
                                        description: Returns a package
                                    400:
                                        description: Origin or channel or identifier or version or release not supplied
                                    404:
                                        description: Origin or channel does not exist
                                    500:
                                        description: Server error
                            /promote:
                                put:
                                    description: Promote a package to a specific channel
                                    responses:
                                        200:
                                            description: Package successfully promoted
                                        400:
                                            description: Origin or channel or identifier or version or release not supplied
                                        404:
                                            description: Origin or channel or identifier or version or release does not exist
                                        500:
                                            description: Server error
                            /demote:
                                put:
                                    description: Demote a package from a specific channel
                                    responses:
                                        200:
                                            description: Package successfully demoted
                                        400:
                                            description: Origin or channel or identifier or version or release not supplied
                                        403:
                                            description: Attempting to demote from unstable is not supported
                                        404:
                                            description: Origin or channel or identifier or version or release does not exist
                                        500:
                                            description: Server error
