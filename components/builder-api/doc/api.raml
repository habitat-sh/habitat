#%RAML 0.8
---
title: Builder API
version: v1

baseUri: https://{rootUri}/{version}
baseUriParameters:
    rootUri:
        description: |
            The root URI for the particular installation of Builder
        example: bldr.habitat.sh, api.habitat.sh, localhost:9636
mediaType: application/json
schemas:
    - netError: |
        {
            "properties": {
                "code": {
                    "type": "integer",
                    "required": true
                },
                "msg": {
                    "type": "string",
                    "required": true
                }
            }
        }
    - job: |
        {
            "properties": {
                "id": {
                    "type": "string",
                    "required": true
                },
                "origin": {
                  "type": "string",
                  "required": true
                },
                "name": {
                  "type": "string",
                  "required": true
                },
                "version": {
                  "type": "string",
                  "required": true
                },
                "release": {
                  "type": "string",
                  "required": true
                },
                "state": {
                    "type": "string",
                    "enum": ["Complete", "Dispatched", "Failed", "Pending", "Processing", "Rejected"],
                    "required": true
                },
                "created_at":{
                  "type": "string",
                  "required": false
                },
                "build_started_at":{
                  "type": "string",
                  "required": false
                },
                "build_finished_at":{
                  "type": "string",
                  "required": false
                },
                "error": {
                    "type": "netError",
                    "required": false
                }
            }
        }
    - jobs: |
        {
            "properties": {
              "jobs": {
                "type": "array",
                "minItems": 0,
                "items": { "type": "job" },
                "uniqueItems": true
              }
           }
        }
    - jobCreate: |
        {
            "properties":  {
                "project_id": {
                    "type": "string",
                    "required": true
                }
            }
        }
    - jobLog: |
        {
            "properties": {
                "start": {
                    "description": "The zero-indexed line number (inclusive) of the first line of log output in `content`.",
                    "type": "integer",
                    "required": true
                },
                "stop": {
                    "description": "The zero-indexed line number (exclusive) of the last line of log output in `content`. Pass this number as the `start` query parameter on your next log request to retrieve the next portion of the log.",
                    "type": "integer",
                    "required": true
                },
                "content": {
                    "description": "A subset of the log output, presented as individual lines. Trailing newline characters are not present. May be empty.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": true
                },
                "is_complete": {
                    "description": "Indicates whether the job log is complete; i.e. additional polling for new lines is not required. Note that a job itself may be complete (i.e., finished running) but the log may not, as log processing is decoupled from build processing.",
                    "type": "boolean",
                    "required": true
                }
            }
        }
    - project: |
        {
            "properties": {
                "id": {
                    "type": "string",
                    "required": true
                },
                "plan_path": {
                    "type": "string",
                    "required": true
                },
                "vcs": {
                    "type": "object",
                    "required": true,
                    "properties": {
                        "type": {
                            "type": "string",
                            "required": true
                        },
                        "url": {
                            "type": "string",
                            "required": true
                        }
                    }
                }
            }
        }
    - projectCreate: |
        {
            "properties": {
                "origin": {
                    "type": "string",
                    "required": true
                },
                "plan_path": {
                    "type": "string",
                    "required": true
                },
                "github": {
                    "type": "object",
                    "required": true,
                    "properties": {
                        "organization": {
                            "type": "string",
                            "required": true
                        },
                        "repo": {
                            "type": "string",
                            "required": true
                        }
                    }
                }
            }
        }
    - projectUpdate: |
        {
            "properties": {
                "plan_path": {
                    "type": "string",
                    "required": true
                },
                "github": {
                    "type": "object",
                    "required": true,
                    "properties": {
                        "organization": {
                            "type": "string",
                            "required": true
                        },
                        "repo": {
                            "type": "string",
                            "required": true
                        }
                    }
                }
            }
        }
securitySchemes:
    - oauth_2_0:
        description: Builder supports OAuth 2.0 for authenticating all API requests.
        type: OAuth 2.0
        describedBy:
            headers:
                Authorization: &authorization
                    description: Used to send a valid OAuth 2 access token.
                    example: |
                        Authorization: Bearer 0b79bab50daca910b000d4f1a2b675d604257e42
            responses:
                401: &resp401
                    description: |
                        Bad or expired token. To fix, you should re-authenticate the user.
                403: &resp403
                    description: |
                        Bad OAuth request. Regenerate your token and try again.
        settings:
            authorizationUri: https://{rootUri}/oauth2/authorize
            accessTokenUri: https://{rootUri}/oauth2/token
            authorizationGrants: [ token ]

/status:
    get:
        description: Returns the health of the service
        responses:
            200:
                description: Service is healthy
            500:
                description: Server fault
            503:
                description: Service temporarily unavailable
/authenticate/{code}:
    get:
        responses:
            200:
                body:
                    application/json:
                        example: |
                            {
                                "token": "0b79bab50daca910b000d4f1a2b675d604257e42",
                                "email": "reset@chef.io",
                                "name": "reset",
                                "id": "73089155726360582",
                                "flags": 0
                            }
/jobs:
    post:
        description: Create a new job for the given project
        securedBy: [oauth_2_0]
        body:
            application/json:
                schema: jobCreate
                example: |
                    {
                        "project_id": "core/nginx"
                    }
        responses:
            201:
                body:
                    application/json:
                        example: |
                            {
                                "id": "73089155726360582",
                                "state": 0
                            }
            400:
                description: Received a malformed JSON body
            404:
                description: Project does not exist with corresponding projectId
            422:
                description: Invalid or missing projectId in body
    /group:
        /{id}:
            /promote:
                /{channel}:
                    post:
                        description: Promote every successful project in a job group to the specified channel
                        responses:
                            200:
                                description: Successful promotion
                            400:
                                description: ID or channel not provided
                            404:
                                description: Group not found
                            500:
                                description: Internal server error
    /{jobId}:
        get:
            description: Get the status of the given job
            responses:
                200:
                    body:
                        application/json:
                            schema: job
                            example: |
                              {
                                  "id": "73089155726360582",
                                  "origin": "core",
                                  "project": "nginx",
                                  "version": "1.0.0",
                                  "release": "20170505001756",
                                  "state": "Complete",
                                  "created_at": "2017-05-05 00:42:35.213765+00",
                                  "build_started_at": "2017-05-05 00:43:11.729835+00",
                                  "build_finished_at": "2017-05-05 00:44:00.896919+00"
                              }
                400:
                    description: Received a jobId that was not a number
        /log:
            get:
                description: |
                  Get the build log (or a portion thereof) for the
                  given job. Until an SSE endpoint can be implemented,
                  this endpoint can be used to poll for the logs of a
                  currently-running job; use of the `start` query
                  parameter ensures that only the portion of the log
                  that is "new", relative to a prior request, will be
                  retrieved.
                queryParameters:
                    start:
                        description: |
                            Return the portion of the log output that
                            starts at the zero-indexed line
                            specified. A request with no given value
                            defaults to `0`; in other words, the
                            entire log will be sent back.
                        type: integer
                        required: false
                        default: 0
                        minimum: 0
                        example: 100
                    color:
                      description: |
                        Whether or not to include embedded ANSI color
                        codes in the log output. By default, all ANSI
                        sequences are removed, yielding plain output.

                        The following values are interpreted as `true`:
                          * `true`
                          * `TRUE`
                          * `t`
                          * `T`
                          * `1`
                          * `on`
                          * `ON`

                        The following values are interpreted as `false`:
                          * `false`
                          * `FALSE`
                          * `f`
                          * `F`
                          * `0`
                          * `off`
                          * `OFF`

                        All other values are considered `false`.
                      type: boolean
                      default: false
                      required: false
                responses:
                    200:
                        body:
                            application/json:
                                schema: jobLog
                                example: |
                                    {
                                        "start": 0,
                                        "stop": 2,
                                        "content": [
                                            "this is the first line",
                                            "this is the second line"
                                        ],
                                        is_complete: false
                                    }
                    400:
                        description: |
                          Received a jobId that was not a number, or
                          an invalid value for the `start` query
                          parameter (e.g., negative, or larger than
                          the actual size of the log file.
                    404:
                        description: |
                          Job does not exist with corresponding jobId,
                          or no log was found for the given job.
/rdeps:
    /{origin}:
        /{name}:
            get:
                description: |
                    Retrieves the list of reverse dependencies for this package.
                responses:
                    200:
                        body:
                            application/json:
                                example: |
                                    {
                                        "origin": "core",
                                        "name": "linux-headers",
                                        "rdeps": [
                                            "core/redis"
                                        ]
                                    }
                    404:
                        description: Package not found
                    500:
                        description: Internal server error
/user:
    /invitations:
        get:
            securedBy: [oauth_2_0]
    /{invitationId}:
        delete:
            securedBy: [oauth_2_0]
            responses:
                204:
                    description: Invitation successfully ignored
        put:
            securedBy: [oauth_2_0]
            responses:
                204:
                    description: Invitation successfully accepted
    /origins:
        get:
            securedBy: [oauth_2_0]
/projects:
    post:
        description: |
            Creates a new project for building a Habitat plan scoped to the given origin. The
            resulting project will be created with an identifier containing the origin and name
            of the project the plan is building separated by a forward slash (i.e. `core/nginx`).
        securedBy: [oauth_2_0]
        body:
            application/json:
                schema: projectCreate
                example: |
                    {
                        "origin": "core",
                        "plan_path": "components/builder-api/plan.sh",
                        "github": {
                            "organization": "habitat-sh",
                            "repo": "habitat"
                        }
                    }
        responses:
            201:
                description: Project created successfully
                body:
                    application/json:
                        schema: project
                        example: |
                            {
                                "id": "core/builder-api",
                                "plan_path": "components/builder-api/plan.sh",
                                "vcs": {
                                    "type": "git",
                                    "url": "https://github.com/habitat-sh/habitat.git"
                                }
                            }
            400:
                description: Received a malformed JSON body
            409:
                description: This project already exists
            422:
                description: |
                    The request body contained missing or invalid values or the file at the given
                    location was unreadable or did not contain a valid plan.
    /{origin}/{name}:
        get:
            description: Return the project matching the given ID
            responses:
                200:
                    body:
                        application/json:
                            schema: project
                            example: |
                                {
                                    "id": "core/builder-api",
                                    "plan_path": "components/builder-api/plan.sh",
                                    "vcs": {
                                        "type": "git",
                                        "url": "https://github.com/habitat-sh/habitat.git"
                                    }
                                }
        put:
            description: Update the project matching the given ID
            securedBy: [oauth_2_0]
            body:
                application/json:
                    schema: project
                    example: |
                        {
                            "plan_path": "components/builder-api/plan.sh",
                            "github": {
                                "organization": "habitat-sh",
                                "repo": "habitat"
                            }
                        }
            responses:
                204:
                    description: Project updated successfully
                400:
                    description: Received a malformed JSON body
                404:
                    description: Project not found
                422:
                    description: |
                        The request body contained missing or invalid values or the file at the
                        given location was unreadable, did not contain a valid plan, or the name
                        of the package it builds does not match the projectId's `name`
        delete:
            description: Destroys the project matching the given ID
            securedBy: [oauth_2_0]
            responses:
                204:
                    description: Project deleted successfully
                404:
                    description: Project not found

        /jobs:
            get:
                description: |
                    Retrieve the 50 most recently started jobs for the given project.

                    Pagination and sort options to come later!
                responses:
                    200:
                        body:
                            application/json:
                                schema:
                                  jobs
                                example: |
                                  {
                                      "jobs": [
                                          {
                                              "id": "73089155726360582",
                                              "origin": "core",
                                              "project": "nginx",
                                              "version": "1.0.0",
                                              "release": "20170505001756",
                                              "state": "Complete",
                                              "created_at": "2017-05-05 00:42:35.213765+00",
                                              "build_started_at": "2017-05-05 00:43:11.729835+00",
                                              "build_finished_at": "2017-05-05 00:44:00.896919+00"
                                          }
                                      ]
                                  }
                    404:
                        description: Project not found
