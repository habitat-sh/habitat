worker_processes  {{cfg.worker_processes}};
daemon off;
pid {{pkg.svc_var_path}}/pid;

events {
    worker_connections  {{cfg.events.worker_connections}};
}

http {
    client_body_temp_path {{pkg.svc_var_path}}/nginx/client-body;
    fastcgi_temp_path {{pkg.svc_var_path}}/nginx/fastcgi;
    proxy_temp_path {{pkg.svc_var_path}}/nginx/proxy;
    scgi_temp_path {{pkg.svc_var_path}}/nginx/scgi_temp_path;
    uwsgi_temp_path {{pkg.svc_var_path}}/nginx/uwsgi;
    include        mime.types;
    default_type   application/octet-stream;

    sendfile       {{cfg.http.sendfile}};
    tcp_nopush     {{cfg.http.tcp_nopush}};
    tcp_nodelay    {{cfg.http.tcp_nodelay}};

    keepalive_timeout  {{cfg.http.keepalive_timeout}};

    gzip  on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";

    upstream backend {
        server 127.0.0.1:9631;
    }

    {{~#if cfg.server.listen_tls}}
    server {
        listen       *:{{cfg.server.listen_port}};
        listen       [::]:{{cfg.server.listen_port}};
        server_name  {{sys.hostname}};
        return       308 https://$host$request_uri;
    }
    {{~/if}}

    server {
        index /index.html;
        server_name  {{sys.hostname}};
        root         {{pkg.path}}/app;

        {{~#if cfg.server.listen_tls}}
        listen                    *:{{cfg.server.listen_tls_port}} ssl;
        listen                    [::]:{{cfg.server.listen_tls_port}} ssl;
        ssl_certificate           {{pkg.svc_files_path}}/{{cfg.server.cert_file}};
        ssl_certificate_key       {{pkg.svc_files_path}}/{{cfg.server.cert_key_file}};
        ssl_protocols             {{cfg.server.ssl_protocols}};
        ssl_ciphers               {{cfg.server.ssl_ciphers}};
        ssl_prefer_server_ciphers {{cfg.server.ssl_prefer_server_ciphers}};
        ssl_session_cache         {{cfg.server.ssl_session_cache}};
        ssl_session_timeout       {{cfg.server.ssl_session_timeout}};
        {{~else}}
        listen                    *:{{cfg.server.listen_port}};
        listen                    [::]:{{cfg.server.listen_port}};
        {{~/if}}

        if ($http_x_forwarded_proto = "http") {
        rewrite ^(.*)$ https://$host$1 permanent;
        }

        location ^~ ^/services/(.*)/(.*)/health {
            add_header Cache-Control "private, no-cache, no-store";
            proxy_pass http://backend;
        }
        location ^~ ^/services/(.*)/(.*)/(.*)/health {
            add_header Cache-Control "private, no-cache, no-store";
            proxy_pass http://backend;
        }
    }
}
