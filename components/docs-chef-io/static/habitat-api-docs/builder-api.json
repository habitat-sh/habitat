{
  "openapi": "3.0.0",
  "info": {
    "title": "Builder API",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://bldr.habitat.sh/v1",
      "variables": {
        "rootUri": {
          "description": "The root URI for the particular installation of Builder\n",
          "default": ""
        },
        "version": {
          "default": ""
        }
      },
      "x-amf-parameters": {
        "rootUri": {
          "description": "The root URI for the particular installation of Builder\n",
          "example": "bldr.habitat.sh, api.habitat.sh, localhost:9636"
        },
        "version": {}
      }
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "HTTPS"
  ],
  "paths": {
    "/authenticate/{code}": {
      "parameters": [
        {
          "name": "code",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Authenticates a user and creates a session",
        "responses": {
          "200": {
            "description": "Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "73089155726360582",
                    "name": "reset",
                    "email": "reset@chef.io",
                    "token": "0b79bab50daca910b000d4f1a2b675d604257e42",
                    "flags": 0,
                    "oauth_token": "bb79bab50dbcab10b000d4f1a2bb75d604257e42"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/session"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/depot/{origin}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/depot/{origin}/pkgs": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get list of unique packages for specified origin",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1234567890,
                    "origin": "xyz",
                    "name": "abc",
                    "visibility": "private",
                    "owner_id": 77730215748435968
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageSettings"
                    }
                  ]
                }
              }
            }
          },
          "206": {
            "description": "Partial list of packages",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1234567890,
                    "origin": "xyz",
                    "name": "abc",
                    "visibility": "private",
                    "owner_id": 77730215748435968
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageSettings"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/rdeps/{origin}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/rdeps/{origin}/{name}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieves the list of reverse dependencies for this package (on-prem setup not supported).\n",
        "responses": {
          "200": {
            "description": "Retrieve reverse dependencies for package",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "origin": "core",
                    "name": "linux-headers",
                    "rdeps": [
                      "core/redis"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Package not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "Returns the health of the service",
        "responses": {
          "200": {
            "description": "Service is healthy"
          },
          "500": {
            "description": "Server fault"
          },
          "503": {
            "description": "Service temporarily unavailable"
          }
        }
      },
      "head": {
        "description": "Returns the health of the service",
        "responses": {
          "200": {
            "description": "Service is healthy"
          },
          "500": {
            "description": "Server fault"
          },
          "503": {
            "description": "Service temporarily unavailable"
          }
        }
      }
    },
    "/ext": {},
    "/ext/installations/{install_id}": {
      "parameters": [
        {
          "name": "install_id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/ext/installations/{install_id}/repos/{repo_id}": {
      "parameters": [
        {
          "name": "install_id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "repo_id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/ext/installations/{install_id}/repos/{repo_id}/contents/{path}": {
      "parameters": [
        {
          "name": "install_id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "repo_id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "path",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get content from github",
        "responses": {
          "200": {
            "description": "Got content from github",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/content"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad search query parameter provided"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ext/integrations/{registry_type}": {
      "parameters": [
        {
          "name": "registry_type",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/ext/integrations/{registry_type}/credentials/validate": {
      "parameters": [
        {
          "name": "registry_type",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Validates registry credentials",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "user": "user",
                  "password": "password",
                  "url": "url"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registry credentials validated"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Authentication failed"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "description": "Retrieve your profile",
        "responses": {
          "200": {
            "description": "Retrieved profile",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "1234567890",
                    "name": "jimmy",
                    "email": "jimmy@example.com"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/userProfile"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "patch": {
        "description": "Update your profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "jimmy@example.com"
                },
                "type": "object",
                "x-amf-merge": [
                  {
                    "$ref": "#/components/schemas/userProfileUpdate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update successful"
          },
          "401": {
            "description": "Authentication failed"
          },
          "422": {
            "description": "Bad JSON submitted"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/profile/access-tokens": {
      "get": {
        "description": "Retrieve your personal access tokens",
        "responses": {
          "200": {
            "description": "Retrieved tokens",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": 1,
                      "account_id": 2,
                      "token": "abcdefg",
                      "created_at": "2022-01-29 09:42:15.273364+00"
                    },
                    {
                      "id": 3,
                      "account_id": 21,
                      "token": "abcdefgihijk",
                      "created_at": "2022-01-31 09:42:15.273364+00"
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/accountTokens"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "post": {
        "description": "Generate a new personal access token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated personal access token",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Received a malformed JSON body"
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/profile/access-tokens/{id}": {
      "parameters": [
        {
          "name": "id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete (revoke) a personal access token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delete successful"
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/user": {},
    "/user/invitations": {
      "get": {
        "description": "Get invitations for the specified user",
        "responses": {
          "200": {
            "description": "Retrieved invitations",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "origin": "core",
                    "account_id": 1,
                    "account_name": "hab",
                    "owner_id": 1331,
                    "ignored": false
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originInvitation"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/user/origins": {
      "get": {
        "description": "Get origins for the specified user",
        "responses": {
          "200": {
            "description": "Retrieved origins",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    "origin1",
                    "origin2"
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/stringList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/projects": {
      "post": {
        "description": "Creates a new project for building a Habitat plan scoped to the given origin. The\nresulting project will be created with an identifier containing the origin and name\nof the project the plan is building separated by a forward slash (i.e. `core/nginx`).\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "origin": "core",
                  "plan_path": "components/builder-api/plan.sh",
                  "installation_id": 1234,
                  "repo_id": 4567
                },
                "type": "object",
                "x-amf-merge": [
                  {
                    "$ref": "#/components/schemas/projectCreate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "habitat/builder-api",
                    "plan_path": "components/builder-api/plan.sh",
                    "vcs": {
                      "type": "git",
                      "url": "https://github.com/habitat-sh/habitat.git"
                    }
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/project"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Received a malformed JSON body"
          },
          "409": {
            "description": "This project already exists"
          },
          "422": {
            "description": "The request body contained missing or invalid values or the file at the given\nlocation was unreadable or did not contain a valid plan.\n"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/projects/{origin}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the list of project names for the specified origin",
        "responses": {
          "200": {
            "description": "Retrieved project names",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    "foo",
                    "bar",
                    "baz"
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/stringList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/projects/{origin}/{name}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Return the project matching the given ID",
        "responses": {
          "200": {
            "description": "Retrieved project",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "habitat/builder-api",
                    "plan_path": "components/builder-api/plan.sh",
                    "vcs": {
                      "type": "git",
                      "url": "https://github.com/habitat-sh/habitat.git"
                    }
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/project"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "description": "Update the project matching the given ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "plan_path": "components/builder-api/plan.sh",
                  "github": {
                    "organization": "habitat-sh",
                    "repo": "habitat"
                  }
                },
                "type": "object",
                "x-amf-merge": [
                  {
                    "$ref": "#/components/schemas/project"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Project updated successfully"
          },
          "400": {
            "description": "Received a malformed JSON body"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Project not found"
          },
          "422": {
            "description": "The request body contained missing or invalid values or the file at the\ngiven location was unreadable, did not contain a valid plan, or the name\nof the package it builds does not match the projectId's `name`\n"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "delete": {
        "description": "Destroys the project matching the given ID",
        "responses": {
          "204": {
            "description": "Project deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/projects/{origin}/{name}/{visibility}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "visibility",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Toggle the visibility settings on a project. Public projects that are made\nprivate will change to hidden instead. Changes made to a project's\nvisibility settings will cascade to its packages.\n",
        "responses": {
          "204": {
            "description": "Visibility settings toggled successfully"
          },
          "400": {
            "description": "Missing origin, name, visibility. Visibility other than public or private submitted."
          },
          "403": {
            "description": "Not authorized to modify this origin"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/projects/{origin}/{name}/integrations/{integration}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "integration",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/projects/{origin}/{name}/integrations/{integration}/default": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "integration",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the specified integration",
        "responses": {
          "200": {
            "description": "Retrieved integration",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "project_id": 121,
                    "integration_id": 14641,
                    "origin": "core",
                    "body": "NoContent",
                    "created_at": "2017-05-05 00:43:11.729835+00"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/projectIntegration"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Integration not found"
          }
        }
      },
      "put": {
        "description": "Creates a project integration",
        "responses": {
          "204": {
            "description": "Integration created"
          },
          "400": {
            "description": "Error parsing integration"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "description": "Deletes an integration",
        "responses": {
          "204": {
            "description": "Integration deleted"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/depot/origins": {
      "post": {
        "description": "Create a new origin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "name": "reset",
                  "owner_id": 1965
                },
                "type": "object",
                "x-amf-merge": [
                  {
                    "$ref": "#/components/schemas/origin"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created origin",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1965,
                    "name": "core",
                    "owner_id": 3861225,
                    "default_package_visibility": "Public"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/origin"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Origin already exists"
          },
          "417": {
            "description": "Expectation failed"
          },
          "422": {
            "description": "Malformed origin in request body"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get origin",
        "responses": {
          "200": {
            "description": "Origin retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1965,
                    "name": "test",
                    "owner_id": 1965,
                    "default_package_visibility": "Public"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/origin"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Origin not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "description": "Update existing origin",
        "responses": {
          "204": {
            "description": "Origin updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "description": "Delete an origin",
        "responses": {
          "204": {
            "description": "Origin deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/origins/{origin}/users": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List all members of an origin",
        "responses": {
          "200": {
            "description": "Retrieved origin members",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "origin": "core",
                    "members": [
                      "glibc",
                      "cmake"
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originMemberList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/origins/{origin}/users/{user}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "user",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete origin member",
        "responses": {
          "204": {
            "description": "Member deleted from origin"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Must be owner of origin to delete"
          },
          "422": {
            "description": "Cannot remove owner with existing origins"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/users/{user}/role": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "user",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Update an origin member's role",
        "parameters": [
          {
            "name": "role",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Member role updated"
          },
          "403": {
            "description": "Unauthorized to perform this action"
          },
          "404": {
            "description": "Invalid origin or username given"
          },
          "422": {
            "description": "Origin member parse error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "get": {
        "description": "Retrieve an origin member's role",
        "responses": {
          "200": {
            "description": "Retrieved origin member role",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "role": "administrator"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/memberRole"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/users/{user}/invitations": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "user",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create an invitation to this origin for this user",
        "responses": {
          "201": {
            "description": "Invitation created successfully"
          },
          "204": {
            "description": "Invitation creation request received"
          },
          "400": {
            "description": "No origin or username given"
          },
          "401": {
            "description": "You are not authorized to send invitations on behalf of this origin"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/transfer/{user}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "user",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Transfer ownership of origin to new origin member",
        "responses": {
          "204": {
            "description": "Transfer successful"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not authorized to transfer ownership"
          },
          "422": {
            "description": "Cannot transfer to self or non-members"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/depart": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Leave an origin you no longer wish to be a member of",
        "responses": {
          "200": {
            "description": "Origin member departed"
          },
          "400": {
            "description": "Invalid origin or name"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Origin owner cannot depart origin"
          },
          "422": {
            "description": "User is not a member of the specified origin"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/invitations": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Return list of invitations for the specified origin",
        "responses": {
          "200": {
            "description": "Retrieved invitations for origin",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "origin": "test",
                    "invitations": [
                      {
                        "id": 1,
                        "origin": "test",
                        "account_id": 411,
                        "account_name": "test",
                        "owner_id": 144,
                        "ignored": false
                      }
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originInvitationList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/keys": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Return a list of key revisions for an organization",
        "responses": {
          "200": {
            "description": "Retrieved key revisions",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "origin": "core",
                      "revision": "20160423193732",
                      "location": "/origins/core/keys/20160423193732"
                    },
                    {
                      "origin": "core",
                      "revision": "20160423193733",
                      "location": "/origins/core/keys/20160423193733"
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originKeys"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "post": {
        "description": "Create a new set of keys",
        "responses": {
          "201": {
            "description": "New keys created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/origins/{origin}/keys/latest": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Download latest origin key",
        "responses": {
          "200": {
            "description": "Downloaded latest origin key",
            "content": {
              "text/plain": {
                "schema": {
                  "example": "Jpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc=",
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/keys/{revision}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "revision",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Download a key revision for a specific origin",
        "responses": {
          "200": {
            "description": "Downloaded key revision for origin",
            "content": {
              "text/plain": {
                "schema": {
                  "example": "SIG-PUB-1\ncore-20160423193745\nJpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc=\n",
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "post": {
        "description": "Upload a new key revision for an origin",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "example": "SIG-PUB-1\ncore-20160423193745\n\nJpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc=\n"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Key successfully uploaded"
          },
          "403": {
            "description": "Authenticated user not a member of the given origin"
          },
          "409": {
            "description": "Key already exists in origin"
          },
          "422": {
            "description": "Invalid key content"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/encryption_key": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Download public encryption key for origin responses",
        "responses": {
          "200": {
            "description": "Key downloaded",
            "content": {
              "text/plain": {
                "schema": {
                  "example": "Jpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc=\n"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/depot/origins/{origin}/secret": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Upload a secret payload body",
        "responses": {
          "200": {
            "description": "Key deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Missing field or payload decryption error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "description": "Get a list of all secrets for the specified origin",
        "responses": {
          "200": {
            "description": "Retrieved secrets for origin",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "value": [
                      {
                        "id": 1,
                        "origin_id": 11,
                        "name": "origin1",
                        "value": "Jpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc="
                      },
                      {
                        "id": 2,
                        "origin_id": 12,
                        "name": "origin2",
                        "value": "Qpmj1gDxoTFCgz3wSL8nt!Qg9RTmsrroUTe+xhD8IHc="
                      }
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originSecrets"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/origins/{origin}/secret/{secret}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "secret",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete a secret for an origin given a secret name",
        "responses": {
          "200": {
            "description": "Key deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/origins/{origin}/secret_keys/latest": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Retrieve the latest secret key",
        "responses": {
          "200": {
            "description": "Retrieved latest secret key",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "11",
                    "origin_id": "121",
                    "name": "core",
                    "revision": "20210407112205",
                    "body": "OK",
                    "owner_id": "1331"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/secret_key"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Secret key already exists in origin"
          }
        }
      }
    },
    "/depot/origins/{origin}/secret_keys/{revision}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "revision",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Upload origin secret key",
        "responses": {
          "201": {
            "description": "Origin secret key uploaded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid secret key content"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/integrations": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get an object of all integrations",
        "responses": {
          "200": {
            "description": "Retrieved all integrations",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "names": [
                      "integration1",
                      "integration2"
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/integrationList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/integrations/{integration}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "integration",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/depot/origins/{origin}/integrations/{integration}/names": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "integration",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get integrations for specified origin",
        "responses": {
          "200": {
            "description": "Retrieved integration names",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "names": [
                      "integration1",
                      "integration2"
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/integrationList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid origin"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/origins/{origin}/integrations/{integration}/{name}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "integration",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get integration for specified origin and name",
        "responses": {
          "200": {
            "description": "Retrieved integration",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "origin": "test",
                    "integration": "test",
                    "name": "test",
                    "body": "test"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originIntegration"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid origin"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Encryption error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "description": "Create integration for specified origin and name",
        "responses": {
          "201": {
            "description": "Integration created"
          },
          "400": {
            "description": "Invalid origin or name"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Encryption error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "description": "Delete integration for specified origin and name",
        "responses": {
          "204": {
            "description": "Integration deleted"
          },
          "400": {
            "description": "Invalid origin or name"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/origins/{origin}/invitations/{invitationId}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "invitationId",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Accept this invitation",
        "responses": {
          "204": {
            "description": "Accepted the invitation"
          },
          "400": {
            "description": "No origin or invitation id given"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invitation parse error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "delete": {
        "description": "Rescind an invitation that hasn't already been ignored",
        "responses": {
          "204": {
            "description": "Invitation rescinded"
          },
          "400": {
            "description": "No origin or invitation id given"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invitation parse error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/origins/{origin}/invitations/{invitationId}/ignore": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "invitationId",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Ignore this invitation",
        "responses": {
          "204": {
            "description": "Invitation ignored"
          },
          "400": {
            "description": "No origin or invitation id given"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invitation parse error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/depot/pkgs": {},
    "/depot/pkgs/{origin}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List packages for an origin",
        "parameters": [
          {
            "name": "distinct",
            "description": "Whether to show a distinct list of packages or not",
            "required": false,
            "in": "query",
            "schema": {
              "description": "Whether to show a distinct list of packages or not",
              "default": false,
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages were found and fit on one page",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "id": 1,
                        "owner_id": 2,
                        "ident": {
                          "origin": "core",
                          "name": "redis"
                        }
                      },
                      {
                        "id": 2,
                        "owner_id": 2,
                        "ident": {
                          "origin": "core",
                          "name": "gcc"
                        }
                      }
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageList"
                    }
                  ]
                }
              }
            }
          },
          "206": {
            "description": "Packages were found and require pagination",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "id": 1,
                        "owner_id": 2,
                        "ident": {
                          "origin": "core",
                          "name": "redis"
                        }
                      },
                      {
                        "id": 2,
                        "owner_id": 2,
                        "ident": {
                          "origin": "core",
                          "name": "gcc"
                        }
                      }
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List packages for a specified origin and package name",
        "responses": {
          "200": {
            "description": "Packages were found and fit on one page",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "id": 1,
                        "owner_id": 2,
                        "ident": {
                          "origin": "core",
                          "name": "redis"
                        }
                      }
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageList"
                    }
                  ]
                }
              }
            }
          },
          "206": {
            "description": "Packages were found and require pagination",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "id": 1,
                        "owner_id": 2,
                        "ident": {
                          "origin": "core",
                          "name": "redis"
                        }
                      }
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}/versions": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Returns all versions and a count of releases for each version for a given package",
        "responses": {
          "200": {
            "description": "Retrieved all package versions",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "origin": "core",
                      "name": "redis",
                      "version": "3.2.1",
                      "release_count": 3,
                      "latest": "20170215222111",
                      "platforms": [
                        "linux"
                      ],
                      "visibility": "Public"
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originPackageVersions"
                    }
                  ]
                }
              }
            }
          },
          "206": {
            "description": "Package versions were found and require pagination",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "origin": "core",
                      "name": "redis",
                      "version": "3.2.1",
                      "release_count": 3,
                      "latest": "20170215222111",
                      "platforms": [
                        "linux"
                      ],
                      "visibility": "Public"
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originPackageVersions"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Origin or package name not supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}/latest": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get latest package for specified origin and package",
        "responses": {
          "200": {
            "description": "Retrieved latest package",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "owner_id": 2,
                    "ident": {
                      "origin": "core",
                      "name": "redis"
                    }
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/package"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}/{version}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get packages with specified origin, package name, and version",
        "responses": {
          "200": {
            "description": "Retrieved packages",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "origin": "core",
                      "name": "redis",
                      "version": "3.2.1",
                      "release_count": 3,
                      "latest": "20170215222111",
                      "platforms": [
                        "linux",
                        "windows"
                      ],
                      "visibility": "Public"
                    },
                    {
                      "origin": "core",
                      "name": "bundler",
                      "version": "1.0.1",
                      "release_count": 4,
                      "latest": "20210215222111",
                      "platforms": [
                        "linux"
                      ],
                      "visibility": "Private"
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/originPackageVersions"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Origin, package name, or version not supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}/{version}/latest": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get latest package with specified origin, package name, and version",
        "responses": {
          "200": {
            "description": "Retrieved latest package",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "owner_id": 2,
                    "ident": {
                      "origin": "core",
                      "name": "redis"
                    }
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/package"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}/{version}/{release}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "release",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets package for specified origin, package name, version, and release",
        "responses": {
          "200": {
            "description": "Retrieved package for specified origin, package name, version, and release",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "owner_id": 2,
                    "ident": {
                      "origin": "core",
                      "name": "redis"
                    }
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/package"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "description": "Uploads a package",
        "responses": {
          "201": {
            "description": "Package uploaded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Invalid package, target, or checksum"
          },
          "424": {
            "description": "Has circular dependencies"
          },
          "500": {
            "description": "Internal server error"
          },
          "501": {
            "description": "Not implemented"
          }
        }
      },
      "delete": {
        "description": "Deletes a package",
        "responses": {
          "204": {
            "description": "Package release deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Could not complete process due to rdeps, channel, or target"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}/{version}/{release}/{visibility}": {
      "parameters": [
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "release",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "visibility",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Change the visibility of a package",
        "responses": {
          "200": {
            "description": "Successfully changed"
          },
          "400": {
            "description": "Missing origin or name or version or release or visibility. Visibility not \"public\" or \"private\"."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Unauthorized to change packages for this origin"
          },
          "404": {
            "description": "Package not found"
          },
          "422": {
            "description": "Could not complete process due to origin, name, or visibility"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}/{version}/{release}/download": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "release",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Downloads the package with specified origin, name, version, and release",
        "responses": {
          "200": {
            "description": "Package downloaded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Package not found"
          },
          "422": {
            "description": "Could not complete process due to invalid target"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/{origin}/{name}/{version}/{release}/channels": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "release",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Gets list of channels for this origin, package name, version, and release",
        "responses": {
          "200": {
            "description": "Retrieved channel list",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "channel": "stable",
                      "created_at": "2020-12-28T20:24:49.588691",
                      "promoted_at": "2020-12-28T20:24:49.588691"
                    },
                    {
                      "channel": "unstable",
                      "created_at": "2021-12-28T20:24:49.588691",
                      "promoted_at": "2021-12-28T20:24:49.588691"
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/channelWithPromotionList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Could not complete process due to invalid identifier or target"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/pkgs/search/{query}": {
      "parameters": [
        {
          "name": "query",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Search for packages with a query string",
        "parameters": [
          {
            "name": "distinct",
            "description": "Whether to show a distinct list of packages or not",
            "required": false,
            "in": "query",
            "schema": {
              "description": "Whether to show a distinct list of packages or not",
              "default": false,
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages were found and fit on one page",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "origin": "core",
                        "name": "redis"
                      },
                      {
                        "origin": "core",
                        "name": "node"
                      }
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageList"
                    }
                  ]
                }
              }
            }
          },
          "206": {
            "description": "Packages were found and require pagination",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "origin": "core",
                        "name": "redis"
                      },
                      {
                        "origin": "core",
                        "name": "node"
                      }
                    ]
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageList"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Query parse error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/events": {
      "get": {
        "description": "Get local builder events",
        "parameters": [
          {
            "name": "nextRange",
            "description": "Paginated index of next range to return",
            "required": true,
            "in": "query",
            "schema": {
              "description": "Paginated index of next range to return",
              "type": "integer"
            }
          },
          {
            "name": "fromDate",
            "description": "From date to include in query results (inclusive)",
            "required": true,
            "in": "query",
            "schema": {
              "description": "From date to include in query results (inclusive)",
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "description": "To date to include in query results (inclusive)",
            "required": true,
            "in": "query",
            "schema": {
              "description": "To date to include in query results (inclusive)",
              "type": "string"
            }
          },
          {
            "name": "query",
            "description": "Query parameters",
            "required": true,
            "in": "query",
            "schema": {
              "description": "Query parameters",
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved local builder events",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "range_start": 0,
                      "range_end": 1,
                      "total_count": 1,
                      "data": [
                        {
                          "operation": "Promote"
                        },
                        {
                          "origin": "core"
                        },
                        {
                          "channel": "stable"
                        },
                        {
                          "package_ident": [
                            {
                              "origin": "core"
                            },
                            {
                              "name": "hab-backline"
                            },
                            {
                              "version": "1.6.420"
                            },
                            {
                              "release": 20211101174345
                            }
                          ]
                        },
                        {
                          "created_at": "2021-12-28T20:24:49.588691"
                        }
                      ]
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/events"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Retrieved local builder events but requires pagination",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "range_start": 1,
                      "range_end": 2,
                      "total_count": 1,
                      "data": [
                        {
                          "operation": "Promote"
                        },
                        {
                          "origin": "core"
                        },
                        {
                          "channel": "stable"
                        },
                        {
                          "package_ident": [
                            {
                              "origin": "core"
                            },
                            {
                              "name": "hab-zipline"
                            },
                            {
                              "version": "1.6.420"
                            },
                            {
                              "release": 20211101174345
                            }
                          ]
                        },
                        {
                          "created_at": "2021-12-28T20:24:49.588691"
                        }
                      ]
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/events"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad search query parameter provided"
          }
        }
      }
    },
    "/depot/events/saas": {
      "get": {
        "description": "Get SAAS builder events",
        "parameters": [
          {
            "name": "nextRange",
            "description": "Paginated index of next range to return",
            "required": true,
            "in": "query",
            "schema": {
              "description": "Paginated index of next range to return",
              "type": "integer"
            }
          },
          {
            "name": "fromDate",
            "description": "From date to include in query results (inclusive)",
            "required": true,
            "in": "query",
            "schema": {
              "description": "From date to include in query results (inclusive)",
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "description": "To date to include in query results (inclusive)",
            "required": true,
            "in": "query",
            "schema": {
              "description": "To date to include in query results (inclusive)",
              "type": "string"
            }
          },
          {
            "name": "query",
            "description": "Query parameters",
            "required": true,
            "in": "query",
            "schema": {
              "description": "Query parameters",
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved SAAS builder events",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "range_start": 0,
                      "range_end": 1,
                      "total_count": 1,
                      "data": [
                        {
                          "operation": "Promote"
                        },
                        {
                          "origin": "core"
                        },
                        {
                          "channel": "stable"
                        },
                        {
                          "package_ident": [
                            {
                              "origin": "core"
                            },
                            {
                              "name": "hab-backline"
                            },
                            {
                              "version": "1.6.420"
                            },
                            {
                              "release": 20211101174345
                            }
                          ]
                        },
                        {
                          "created_at": "2021-12-28T20:24:49.588691"
                        }
                      ]
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/events"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Retrieved SAAS builder events but requires pagination",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "range_start": 1,
                      "range_end": 2,
                      "total_count": 1,
                      "data": [
                        {
                          "operation": "Promote"
                        },
                        {
                          "origin": "core"
                        },
                        {
                          "channel": "stable"
                        },
                        {
                          "package_ident": [
                            {
                              "origin": "core"
                            },
                            {
                              "name": "hab-zipline"
                            },
                            {
                              "version": "1.6.420"
                            },
                            {
                              "release": 20211101174345
                            }
                          ]
                        },
                        {
                          "created_at": "2021-12-28T20:24:49.588691"
                        }
                      ]
                    }
                  ],
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/events"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad search query parameter provided"
          }
        }
      }
    },
    "/notify": {
      "post": {
        "description": "Notification of github events [ping, push]",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Invalid parameter provided"
          }
        }
      }
    },
    "/depot/channels/{origin}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List all channels for an origin",
        "responses": {
          "200": {
            "description": "Retrieved channels for origin",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "name": "stable"
                    },
                    {
                      "name": "unstable"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Origin not specified"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create a channel",
        "responses": {
          "201": {
            "description": "Channel successfully created"
          },
          "400": {
            "description": "Origin or channel not supplied"
          },
          "404": {
            "description": "Origin does not exist"
          },
          "409": {
            "description": "Channel already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "description": "Deletes a channel",
        "responses": {
          "200": {
            "description": "Channel successfully deleted"
          },
          "400": {
            "description": "Origin or channel not supplied"
          },
          "403": {
            "description": "Channel can not be deleted"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List all packages in a channel",
        "responses": {
          "200": {
            "description": "Returns a list of packages",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "range_start": 0,
                    "range_end": 49,
                    "total_count": 8,
                    "data": [
                      {
                        "origin": "core",
                        "name": "glibc",
                        "version": "2.22",
                        "release": "20160612063629"
                      },
                      {
                        "origin": "core",
                        "name": "linux-headers",
                        "version": "4.3",
                        "release": "20160612063537"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Origin or channel not supplied"
          },
          "404": {
            "description": "Origin or channel does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/_latest": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List latest packages in a channel, by target (required)",
        "responses": {
          "200": {
            "description": "Returns a list of packages",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "channel": "stable",
                    "target": "x86_64-linux",
                    "data": [
                      {
                        "origin": "core",
                        "name": "glibc",
                        "version": "2.22",
                        "release": "20160612063629"
                      },
                      {
                        "origin": "core",
                        "name": "linux-headers",
                        "version": "4.3",
                        "release": "20160612063537"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/promote": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Promotes all packages in a channel queryParameters",
        "responses": {
          "200": {
            "description": "Packages successfully promoted"
          },
          "400": {
            "description": "Forbidden packages/Badly formed request for promotion"
          },
          "401": {
            "description": "You are not authorized to request promotion for this origin"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/demote": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Demotes list of packages from a channel queryParameters",
        "responses": {
          "200": {
            "description": "Packages successfully demoted"
          },
          "400": {
            "description": "Forbidden packages/Badly formed request for demotion"
          },
          "401": {
            "description": "You are not authorized to request demotion for this origin"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/{pkg}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "pkg",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List all packages in a channel that match the specified identifier",
        "responses": {
          "200": {
            "description": "Retrieved a complete list of packages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageIdentList"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Retrieved list of packages - pagination required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageIdentList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Origin or channel not supplied"
          },
          "404": {
            "description": "Origin or channel does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/{pkg}/latest": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "pkg",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the latest version of the package in this channel that matches the specified identifier",
        "responses": {
          "200": {
            "description": "Returns a package",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "checksum": "7a998b6a756f7ca769ac75edf66c119d14aa911d7cfb5fd91ad3ff21ddf0d257",
                    "config": "",
                    "deps": [
                      {
                        "name": "glibc",
                        "origin": "core",
                        "release": "20160612063629",
                        "version": "2.22"
                      }
                    ],
                    "exposes": [],
                    "ident": {
                      "name": "tree",
                      "origin": "core",
                      "release": "20161102210957",
                      "version": "1.7.0"
                    },
                    "manifest": "# core / tree\n\n\n* __Maintainer__: The Habitat Maintainers <humans@habitat.sh>\n* __Version__: 1.7.0\n* __Release__: 20161102210957\n* __Architecture__: x86_64\n* __System__: linux\n* __Target__: x86_64-linux\n* __Upstream URL__: upstream project's website or home page is not defined\n* __License__: gplv2+ \n* __Source__: [http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz](http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz)\n* __SHA__: `6957c20e82561ac4231638996e74f4cfa4e6faabc5a2f511f0b4e3940e8f7b12`\n* __Path__: `/hab/pkgs/core/tree/1.7.0/20161102210957`\n* __Build Dependencies__: `core/make core/gcc `\n* __Dependencies__: `core/glibc `\n* __Interpreters__: no interpreters or undefined\n\n# Plan\n\n## Build Flags\n\n```bash\nCFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include\nCPPFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include\nCXXFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include\nLDFLAGS: -L/hab/pkgs/core/glibc/2.22/20160612063629/lib -L/hab/pkgs/core/gcc/5.2.0/20161031031637/lib\nLD_RUN_PATH: /hab/pkgs/core/tree/1.7.0/20161102210957/lib:/hab/pkgs/core/glibc/2.22/20160612063629/lib\n```\n\n## Plan Source\n\n```bash\npkg_name=tree\npkg_origin=core\npkg_version=1.7.0\npkg_maintainer=\"The Habitat Maintainers <humans@habitat.sh>\"\npkg_license=('gplv2+')\npkg_source=http://mama.indstate.edu/users/ice/tree/src/tree-${pkg_version}.tgz\npkg_shasum=6957c20e82561ac4231638996e74f4cfa4e6faabc5a2f511f0b4e3940e8f7b12\npkg_deps=(core/glibc)\npkg_build_deps=(core/make core/gcc)\npkg_bin_dirs=(bin)\npkg_include_dirs=(include)\npkg_lib_dirs=(lib)\n\ndo_build() {\n  make\n}\n\ndo_install() {\n  sed -i \"s#prefix = /usr#prefix = ${pkg_prefix}#\" Makefile\n  make install\n}\n```",
                    "tdeps": [
                      {
                        "name": "glibc",
                        "origin": "core",
                        "release": "20160612063629",
                        "version": "2.22"
                      },
                      {
                        "name": "linux-headers",
                        "origin": "core",
                        "release": "20160612063537",
                        "version": "4.3"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Origin or channel or identifier not supplied"
          },
          "404": {
            "description": "Origin or channel does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/{pkg}/{version}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "pkg",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "List all packages in a channel that match the specified identifier and version",
        "responses": {
          "200": {
            "description": "Retrieved a complete list of packages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageIdentList"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Retrieved list of packages - pagination required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageIdentList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Origin or channel or identifier or version not supplied"
          },
          "404": {
            "description": "Origin or channel does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/{pkg}/{version}/latest": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "pkg",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the latest version of the package in this channel that matches the specified identifier and version",
        "responses": {
          "200": {
            "description": "Retrieved a complete list of packages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageIdentList"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Retrieved list of packages - pagination required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageIdentList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Origin or channel or identifier or version not supplied"
          },
          "404": {
            "description": "Origin or channel does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/{pkg}/{version}/{release}": {
      "parameters": [
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "pkg",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "release",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get the package in a channel that matches the specified identifier, version and release",
        "responses": {
          "200": {
            "description": "Returns a package",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageIdent"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Origin or channel or identifier or version or release not supplied"
          },
          "404": {
            "description": "Origin or channel does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/{pkg}/{version}/{release}/promote": {
      "parameters": [
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "pkg",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "release",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Promote a package to a specific channel",
        "responses": {
          "200": {
            "description": "Package successfully promoted"
          },
          "400": {
            "description": "Origin or channel or identifier or version or release not supplied"
          },
          "404": {
            "description": "Origin or channel or identifier or version or release does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/depot/channels/{origin}/{channel}/pkgs/{pkg}/{version}/{release}/demote": {
      "parameters": [
        {
          "name": "channel",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "pkg",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "version",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "release",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Demote a package from a specific channel",
        "responses": {
          "200": {
            "description": "Package successfully demoted"
          },
          "400": {
            "description": "Origin or channel or identifier or version or release not supplied"
          },
          "403": {
            "description": "Attempting to demote from unstable is not supported"
          },
          "404": {
            "description": "Origin or channel or identifier or version or release does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/settings/{origin}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/settings/{origin}/{name}": {
      "parameters": [
        {
          "name": "origin",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create new package settings entry",
        "responses": {
          "201": {
            "description": "Create successful",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1234567890,
                    "origin": "xyz",
                    "name": "abc",
                    "visibility": "private",
                    "owner_id": 77730215748435968,
                    "created_at": "2017-05-05 00:42:35.213765+00",
                    "updated_at": "2017-05-05 00:42:35.213765+00"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageSettings"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Unauthorized to perform this action"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "get": {
        "description": "Get package settings for top level package",
        "responses": {
          "200": {
            "description": "Returns package settings",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1234567890,
                    "origin": "xyz",
                    "name": "abc",
                    "visibility": "private",
                    "owner_id": 77730215748435968,
                    "created_at": "2017-05-05 00:42:35.213765+00",
                    "updated_at": "2017-05-05 00:42:35.213765+00"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageSettings"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Unauthorized to perform this action"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "put": {
        "description": "Update a package settings entry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "visibility": "private"
                },
                "type": "object",
                "x-amf-merge": [
                  {
                    "$ref": "#/components/schemas/packageSettingsUpdate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update successful",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1234567890,
                    "origin": "xyz",
                    "name": "abc",
                    "visibility": "private",
                    "owner_id": 77730215748435968,
                    "created_at": "2017-05-05 00:42:35.213765+00",
                    "updated_at": "2017-05-05 00:42:35.213765+00"
                  },
                  "type": "object",
                  "x-amf-merge": [
                    {
                      "$ref": "#/components/schemas/packageSettings"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Unauthorized to perform this action"
          },
          "422": {
            "description": "Invalid or missing visibility in body"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "delete": {
        "description": "Delete a package settings entry",
        "responses": {
          "204": {
            "description": "Package settings deleted"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Unauthorized to perform this action"
          },
          "409": {
            "description": "Conflict, Not deletable"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "projectCreate": {
        "type": "object",
        "required": [
          "origin",
          "plan_path",
          "github"
        ],
        "properties": {
          "origin": {
            "type": "string"
          },
          "plan_path": {
            "type": "string"
          },
          "github": {
            "type": "object",
            "required": [
              "organization",
              "repo"
            ],
            "properties": {
              "organization": {
                "type": "string"
              },
              "repo": {
                "type": "string"
              }
            }
          }
        }
      },
      "memberRole": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string"
          }
        }
      },
      "package": {
        "type": "object",
        "required": [
          "id",
          "owner_id",
          "ident"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "owner_id": {
            "type": "integer"
          },
          "ident": {}
        }
      },
      "originInvitation": {
        "type": "object",
        "required": [
          "id",
          "origin",
          "account_id",
          "account_name",
          "owner_id",
          "ignored"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "origin": {
            "type": "string"
          },
          "account_id": {
            "type": "integer"
          },
          "account_name": {
            "type": "string"
          },
          "owner_id": {
            "type": "integer"
          },
          "ignored": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "userProfile": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "originPackageVersions": {
        "type": "object",
        "properties": {
          "originPackageVersions": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/originPackageVersion"
                }
              ]
            }
          }
        }
      },
      "packageSettingsUpdate": {
        "type": "object",
        "required": [
          "visibility"
        ],
        "properties": {
          "visibility": {
            "type": "string"
          }
        }
      },
      "event": {
        "type": "object",
        "required": [
          "operation",
          "origin",
          "channel",
          "package_ident"
        ],
        "properties": {
          "operation": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "package_ident": {},
          "created_at": {
            "type": "string"
          }
        }
      },
      "project": {
        "type": "object",
        "required": [
          "id",
          "plan_path",
          "vcs"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "plan_path": {
            "type": "string"
          },
          "vcs": {
            "type": "object",
            "required": [
              "type",
              "url"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "originKeys": {
        "type": "object",
        "properties": {
          "originKeys": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/originKey"
                }
              ]
            }
          }
        }
      },
      "originPackageVersion": {
        "type": "object",
        "required": [
          "origin",
          "name",
          "version",
          "release_count",
          "latest",
          "platforms",
          "visibility"
        ],
        "properties": {
          "origin": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "release_count": {
            "type": "integer"
          },
          "latest": {
            "type": "string"
          },
          "platforms": {},
          "visibility": {
            "type": "string"
          }
        }
      },
      "integrationList": {
        "type": "object",
        "properties": {
          "names": {
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "userProfileUpdate": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "originKey": {
        "type": "object",
        "required": [
          "origin",
          "revision",
          "location"
        ],
        "properties": {
          "origin": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        }
      },
      "packageIdent": {
        "type": "object",
        "required": [
          "origin",
          "name"
        ],
        "properties": {
          "origin": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "release": {
            "type": "string"
          },
          "channels": {},
          "platforms": {}
        }
      },
      "channelWithPromotion": {
        "type": "object",
        "required": [
          "channel"
        ],
        "properties": {
          "channel": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "promoted_at": {
            "type": "string"
          }
        }
      },
      "projectUpdate": {
        "type": "object",
        "required": [
          "plan_path",
          "github"
        ],
        "properties": {
          "plan_path": {
            "type": "string"
          },
          "github": {
            "type": "object",
            "required": [
              "organization",
              "repo"
            ],
            "properties": {
              "organization": {
                "type": "string"
              },
              "repo": {
                "type": "string"
              }
            }
          }
        }
      },
      "originIntegration": {
        "type": "object",
        "required": [
          "id",
          "origin",
          "integration",
          "name",
          "body"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "origin": {
            "type": "string"
          },
          "integration": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "secret_key": {
        "type": "object",
        "required": [
          "id",
          "origin_id",
          "name",
          "revision",
          "body",
          "owner_id"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "origin_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          }
        }
      },
      "packageIdentList": {
        "type": "object",
        "properties": {
          "packageList": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/packageIdent"
                }
              ]
            }
          }
        }
      },
      "originMemberList": {
        "type": "object",
        "required": [
          "origin"
        ],
        "properties": {
          "origin": {
            "type": "string"
          },
          "members": {}
        }
      },
      "origin": {
        "type": "object",
        "required": [
          "name",
          "owner_id"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "owner_id": {
            "type": "integer"
          },
          "default_package_visibility": {
            "enum": [
              "Public",
              "Private"
            ],
            "type": "string"
          }
        }
      },
      "projectIntegration": {
        "type": "object",
        "required": [
          "id",
          "project_id",
          "integration_id",
          "origin",
          "body"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "project_id": {
            "type": "integer"
          },
          "integration_id": {
            "type": "integer"
          },
          "origin": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "accountToken": {
        "type": "object",
        "required": [
          "id",
          "account_id",
          "token"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "account_id": {
            "type": "integer"
          },
          "token": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          }
        }
      },
      "content": {
        "type": "object",
        "required": [
          "name",
          "path",
          "sha",
          "size",
          "html_url",
          "git_url",
          "download_url",
          "content",
          "encoding"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "html_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "download_url": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          }
        }
      },
      "session": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email",
          "token",
          "flags",
          "oauth_token"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "flags": {
            "type": "string"
          },
          "oauth_token": {
            "type": "string"
          }
        }
      },
      "netError": {
        "type": "object",
        "required": [
          "code",
          "msg"
        ],
        "properties": {
          "code": {
            "type": "integer"
          },
          "msg": {
            "type": "string"
          }
        }
      },
      "stringList": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": false,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "originSecrets": {
        "type": "object",
        "properties": {
          "originSecrets": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/originSecret"
                }
              ]
            }
          }
        }
      },
      "packageList": {
        "type": "object",
        "properties": {
          "packageList": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/package"
                }
              ]
            }
          }
        }
      },
      "originSecret": {
        "type": "object",
        "required": [
          "id",
          "origin_id",
          "name",
          "value"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "origin_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "packageSettings": {
        "type": "object",
        "required": [
          "id",
          "origin",
          "name",
          "visibility",
          "owner_id"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "origin": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "owner_id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "accountTokens": {
        "type": "object",
        "properties": {
          "accountTokens": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/accountToken"
                }
              ]
            }
          }
        }
      },
      "originInvitationList": {
        "type": "object",
        "required": [
          "origin"
        ],
        "properties": {
          "origin": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/originInvitation"
                }
              ]
            }
          }
        }
      },
      "events": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/event"
                }
              ]
            }
          }
        }
      },
      "channelWithPromotionList": {
        "type": "object",
        "properties": {
          "channelWithPromotionList": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "x-amf-merge": [
                {
                  "$ref": "#/components/schemas/channelWithPromotion"
                }
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "oauth_2_0": {
        "type": "oauth2",
        "description": "Builder supports OAuth 2.0 for authenticating all API requests.",
        "x-amf-describedBy": {
          "headers": {
            "Authorization": {
              "description": "Used to send a valid OAuth 2 access token.",
              "example": "Authorization: Bearer 0b79bab50daca910b000d4f1a2b675d604257e42\n"
            }
          },
          "responses": {
            "401": {
              "description": "Bad or expired token. To fix, you should re-authenticate the user.\n"
            },
            "403": {
              "description": "Bad OAuth request. Regenerate your token and try again.\n"
            }
          }
        },
        "flows": {
          "null": {
            "authorizationUrl": "https://{rootUri}/oauth2/authorize",
            "tokenUrl": "https://{rootUri}/oauth2/token"
          }
        }
      }
    }
  }
}
