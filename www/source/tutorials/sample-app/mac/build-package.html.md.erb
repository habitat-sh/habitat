---
title: Build the sample package
---

<ul class="main-content--version">
  <li>Current version:</li>
  <li><a class="active" href="/tutorials/sample-app/mac/build-package">Mac</a></li>
  <li><a href="/tutorials/sample-app/linux/build-package">Linux</a></li>
  <li><a href="/tutorials/sample-app/windows/build-package">Windows</a></li>
</ul>
<hr />

# Build the package

The studio is a minimal, clean, [chrooted](https://en.wikipedia.org/wiki/Chroot) shell environment for you
to build and test your Habitat packages. The studio itself is a Habitat package, and all of the dependent 
packages for the studio will be downloaded, unpacked, and installed. The studio will also import any secret 
origin keys created by `hab setup`. When running macOS or Windows on your host machine, the studio runs inside a Docker 
container as root.

Packages are built in the studio through the `hab-plan-build` script, which handles creating Habitat packages 
from plan files. The `hab-plan-build` script looks for `plan.sh` either in the current directory, or in a `./habitat` directory.

> **Note** The current directory you are in on your host machine will become the `/src` directory when you enter the studio.
In this tutorial, because we are copying source files from within our project repo into our package, we must enter the studio 
at the `/myrailsapp` directory level so that our source files are included in the chrooted studio environment.

1. To build the sample rails application, start by changing directories to the root directory for your project.

       cd ~/habitat-example-plans/myrailsapp/

2. Make sure Docker for Mac is running and then enter into the studio environment.

       hab studio enter

   The package download and installation process should only take a few moments. If successful, you should see another bash prompt 
   like this:

       [1][default:/src:0]#

   Because the studio is chrooted, the `src` directory maps to the `~/habitat-example-plans/myrailsapp` directory you were in before 
   you entered the studio.

3. Run the `build` command to build your package.

       [2][default:/src:0]# build

    The last set of output messages from running `build` should look something like this:

    <%= partial "/shared/create_plan_build_output_sample_app" %>

    The source files are stored in `/hab/pkgs/ORIGIN/PACKAGENAME/VERSION/RELEASE` (for example, `/hab/pkgs/originname/myrailsapp/0.1.0/20170624214244`). 
    Listing the contents of that directory will show you the source files copied into the package as well as package metadata and plan files. By default, 
    this location is ephemeral. When you exit the studio, the studio environment is destroyed and recreated the next time you enter it.

    The package created is also stored in a relative `results` directory (for example, `/src/results/originname-myrailsapp-0.1.0-20170624214244-x86_64-linux.hart`) 
    that persists when you exit the studio. You will mostly refer to the .hart file when uploading your package to the depot.

## Export your package to a Docker container

Habitat packages can be exported into multiple runtime formats where the Habitat supervisor, user package, and any runtime dependencies are 
installed and setup in that environment. For Docker containers, this means creating an image using the Docker scratch image and building up 
the rest of the image with exported packages.

Run `hab pkg export docker <originname>/myrailsapp` with the origin you chose at setup.

    [2][default:/src:0]# hab pkg export docker originname/myrailsapp

Because we need to connect to a PostgreSQL database managed by Habitat, export the PostgreSQL database package to a Docker container as well.

    [1][default:/src:0]# hab pkg export docker core/postgresql

Once you have finished exporting both packages, exit out of the studio.

<hr>
<ul class="main-content--button-nav">
  <li><a href="/tutorials/sample-app/mac/run-app" class="button cta">Next - Run the sample application</a></li>
  <li><a href="/tutorials/sample-app/mac/add-health-check-hook/">Back to previous step</a></li>
</ul>