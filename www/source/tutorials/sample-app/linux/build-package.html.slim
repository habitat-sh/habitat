---
title: Habitat - Build the sample package
---

= partial '/partials/tutorials/platform_switcher', locals: { platform: 'linux' }

section.sample-app

  h1 Build the Package

  p  The studio is a minimal, clean, #{link_to 'chrooted', 'https://en.wikipedia.org/wiki/Chroot'} shell environment for you to build and test your Habitat packages. The studio itself is a Habitat package, and all of the dependent packages for the studio will be downloaded, unpacked, and installed. The studio will also import any secret origin keys created by <code>hab setup</code>.

  p Packages are built in the studio through the <code>hab-plan-build</code> script, which handles creating Habitat packages from plan files. The <code>hab-plan-build</code> script looks for <code>plan.sh</code> either in the current directory, or in a <code>./habitat</code> directory.

  blockquote
    p The current directory you are in on your host machine will become the <code>/src</code> directory when you enter the studio. In this tutorial, because we are copying source files from within our project repo into our package, we must enter the studio at the <code>/myrailsapp</code> directory level so that our source files are included in the chrooted studio environment.

  ol
    li
      p To build the sample Rails application, start by changing directories to the root directory for your project.

      pre
        code.console $ cd ~/habitat-example-plans/myrailsapp/

    li
      p Enter into the studio environment.

      pre
        code.console $ hab studio enter

      p The package download and installation process should only take a few moments. If successful, you should see another bash prompt like this:

      pre
        code.console [1][default:/src:0]#</code>

      p Because the studio is chrooted, the <code>src</code> directory maps to the <code>~/habitat-example-plans/myrailsapp</code> directory you were in before you entered the studio.

    li
      p Run the <code>build</code> command to build your package.

      pre
        code.console [2][default:/src:0]# build

      p The last set of output messages from running <code>build</code> should look something like this:

      = partial "/partials/tutorials/create_plan_build_output_sample_app"

      p The source files are stored in <code>/hab/pkgs/ORIGIN/PACKAGENAME/VERSION/RELEASE</code> (for example, <code>/hab/pkgs/originname/myrailsapp/0.1.0/20170624214244</code>). Listing the contents of that directory will show you the source files copied into the package as well as package metadata and plan files. By default, this location is ephemeral. When you exit the studio, the studio environment is destroyed and recreated the next time you enter it.

      p The package created is also stored in a relative <code>results</code> directory (for example, <code>/src/results/originname-myrailsapp-0.1.0-20170624214244-x86_64-linux.hart</code>) that persists when you exit the studio. You will mostly refer to the .hart file when uploading your package to the depot.

  h2 Export the Package as a Docker Container

  p Habitat packages can be exported into multiple runtime formats where the Habitat Supervisor, user package, and any runtime dependencies are installed and setup in that environment. For Docker containers, this means creating an image using the Docker scratch image and building up the rest of the image with exported packages.

  p Run <code>hab pkg export docker originname/myrailsapp</code> with the origin you chose at setup.

  pre
    code.console [2][default:/src:0]# hab pkg export docker originname/myrailsapp

  p Because we need to connect to a PostgreSQL database managed by Habitat, export the PostgreSQL database package to a Docker container as well.

  pre
    code.console [1][default:/src:0]# hab pkg export docker core/postgresql

  p Once you have finished exporting both packages, exit out of the studio.
  
  pre
    code.console [5][default:/src:0]# exit

= link_to 'Next: Run the Sample App', '/tutorials/sample-app/linux/run-app/', class: 'button cta'
