---
title: Creating your first plan
---

# Create your first plan
In the previous step of this tutorial, you saw the files that make up our Node.js application. Now it's time to create the artifact for that application. This step will show you how, starting with the blueprint for an artifact: the plan.

## Start with the basics
A plan is comprised of shell scripts that define how your application should be built, installed and behave at runtime; however, you can include other files such as configuration files or other binaries as well.

To create a plan, do the following:

1. If you still have the terminal window open from the setup step, you should be in the studio and in `/src/plans`; otherwise, open the studio and change to that directory.

       [1][default:/src:0]# cd plans

2. Create a new directory and a plan called "mytutorialapp" by calling the `new-plan` target.

       [2][default:/src/plans:0]# make new-plan plan=mytutorialapp

3. Open the `mytutorialapp/plan.sh` file in your favorite text editor. The filesystem is shared between your host machine and the studio, so you can use any text editor installed on your host machine, or use vim, which is installed in the studio environment. Here's an example of what the plan template creates:


        pkg_origin=core
        pkg_name=mytutorialapp
        pkg_version=0.1.0
        pkg_maintainer="You <humans@example.com>"
        pkg_license=()
        pkg_source=http://example.com/${pkg_name}-${pkg_version}.tar.xz
        pkg_shasum=sha256sum
        pkg_deps=(core/glibc)
        pkg_build_deps=(core/coreutils)
        pkg_bin_dirs=(bin)
        pkg_include_dirs=(include)
        pkg_lib_dirs=(lib)


<%= partial "/shared/new_plan_description" %>

## Modify the plan

We now have a skeleton plan, but we need to modify some of its settings before we can continue.

1. Change the `pkg_origin` value to `myorigin`. The "core" origin is reserved for the Habitat team.

2. Change the `pkg_maintainer` value to `"Your Name <your email address>"`.

3. Change the `pkg_source` value to point to the archive file that contains the source files listed in the previous step.

        pkg_source=https://s3-us-west-2.amazonaws.com/nodejs-tutorial-app/nodejs-tutorial-app-0.1.0.tar.gz

4. Change the `pkg_shasum` value to the correct checksum for the tarball.

        pkg_shasum=2ad73b78ef5e88e9e916873c0f762bbdf286e4de93e67cf211f9761a2876c7ef

    > Note: If you modified the source files from the previous step and created your own archive, you will have to compute the sha256 value yourself. If your computed value does not match the value calculated by the hab-plan-build script, an error with the expected value will be returned when you execute your plan.

5. Our Node.js application depends on the `node` and `npm` binaries at runtime, so we need to include one of the core Habitat artifacts, `core/node`, as another one of our dependencies. Core Habitat artifacts are maintained by the Habitat team for general artifact building. The default plan also includes a reference to `core/glibc`, but because it is a transitive dependency used by `core/node`, we don't explicitly need to list it.

        pkg_deps=(core/node)

6. Our source files and other elements of our artifact do not depend on `core/coreutils` to build, so you can simply remove `core/coreutils`.

        pkg_build_deps=()

    > Note: Later on in this topic we are going to install the `nconf` module into our package, which requires the `npm` binary; however, we do not need to include `core/node` as a build dependency because the hab-plan-build script automatically installs build and runtime dependencies and adds their bin directories to the PATH variable before building the artifact. So, if you need the same dependent binary for both build and runtime operations, you only need to include it as a runtime dependency.

7. The Node.js application does not create any new binaries or libraries of its own, so you can remove the following three lines:

        pkg_bin_dirs=(bin)
        pkg_include_dirs=(include)
        pkg_lib_dirs=(lib)

8. Because we eventually want to demonstrate how to run our Habitat service in a Docker container, we need to expose port 8080. This action exposes the port to other Docker containers. It does not publish this port for access by the host machine. We will do that in a later step. For now, add the following line to your plan:

        pkg_expose=(8080)

You've finished with the basic setup of your plan. It is time to move into defining how our source files from the previous step get installed into the mytutorialapp artifact through callbacks.

## Add in callbacks

Callbacks in a plan are simply overrides to existing functions that are called by the `hab-plan-build.sh` script at build time. Because our source code in this tutorial relies on the `nconf` module, we need to make sure it's packaged up in our artifact. Also, our `package.json` and `server.js` source files need to move from the the tarball that we referenced in `pkg_source` into our artifact.

To do both of those actions, we will implement our own **do_build()** and **do_install()** callbacks. By default, these functions perform simple tasks like calling `make` and `make install`. Add the following function definitions to your `plan.sh` file below the plan settings.

~~~ bash
do_build() {
  # The nodejs-tutorial-app source code is unpacked into a folder,
  # nodejs-tutorial-app-0.1.0, at the root of $HAB_CACHE_SRC_PATH.

  # All of the source files need to be copied over into the $pkg_dirname
  # directory (mytutorialapp-0.1.0).
  cp -vr ${HAB_CACHE_SRC_PATH}/nodejs-tutorial-app-0.1.0/* .

  # This installs both npm as well as the nconf module we listed as a
  # dependency in package.json.
  npm install
}

do_install() {
  # Our source files were copied over to the HAB_CACHE_SRC_PATH in do_build(),
  # so now they need to be copied into the root directory of our package through
  # the pkg_prefix variable. This is so that we have the source files available
  # in the package.
  cp package.json ${pkg_prefix}
  cp server.js ${pkg_prefix}

  # Copy over the nconf module to the package that we installed in do_build().
  mkdir -p ${pkg_prefix}/node_modules/
  cp -vr node_modules/* ${pkg_prefix}/node_modules/
}
~~~

> Note: The first line of the **do_build()** function is only required because our package name and version do not match the source file name and `pkg_prefix` refers to the fully-qualified package path directory.

Here's what your `plan.sh` should look like in the end:

~~~ bash
pkg_origin=myorigin
pkg_name=mytutorialapp
pkg_version=0.1.0
pkg_maintainer="Your Name <your email address>"
pkg_license=()
pkg_source=https://s3-us-west-2.amazonaws.com/nodejs-tutorial-app/nodejs-tutorial-app-0.1.0.tar.gz
pkg_shasum=2ad73b78ef5e88e9e916873c0f762bbdf286e4de93e67cf211f9761a2876c7ef
pkg_filename=nodejs-tutorial-app-0.1.0.tar.gz
pkg_deps=(core/node)
pkg_build_deps=(core/node)
pkg_expose=(8080)


do_build() {
  # The nodejs-tutorial-app source code is unpacked into a folder,
  # nodejs-tutorial-app-0.1.0, at the root of $HAB_CACHE_SRC_PATH.

  # All of the source files need to be copied over into the $pkg_dirname
  # directory (mytutorialapp-0.1.0).
  cp -vr ${HAB_CACHE_SRC_PATH}/nodejs-tutorial-app-0.1.0/* .

  # This installs both npm as well as the nconf module we listed as a
  # dependency in package.json.
  npm install
}

do_install() {
  # Our source files were copied over to the HAB_CACHE_SRC_PATH in do_build(),
  # so now they need to be copied into the root directory of our package through
  # the pkg_prefix variable. This is so that we have the source files available
  # in the package.
  cp package.json ${pkg_prefix}
  cp server.js ${pkg_prefix}

  # Copy over the nconf module to the package that we installed in do_build().
  mkdir -p ${pkg_prefix}/node_modules/
  cp -vr node_modules/* ${pkg_prefix}/node_modules/
}
~~~

For a complete listing of all of the plan settings, callbacks, and runtime hooks, see the [Plan syntax guide](/docs/plan-syntax).

## Create your origin key
As part of building an artifact, you need to have an origin key installed in your studio environment. Origin keys are secret signature keys used to sign artifacts for that specific origin. If you do not have an origin signature key for the origin you specified in the `pkg_origin` value, you can create a new one for this tutorial from within your studio session.

    [3][default:/src/plans:0]# hab origin key generate myorigin

This subcommand will place myorigin-_timestamp_.sig.key and myorigin-_timestamp_.pub files in the `/hab/cache/keys` directory. As we said earlier, you use the signature key as part of the artifact signing process and should not be shared freely with anyone; however, if anyone wants to download and use your artifact, then they must have your .pub key installed in their local `/hab/cache/keys` directory.

Both the Habitat dev shell and studio have the core public key installed in `hab/cache/keys` to verify any build or runtime core dependencies that you may reference when building your plan.

## Do an initial build (optional)
If you want to see your package build in the studio, go back to your terminal window where your studio environment is open, switch to the `/src/plans` directory, and run the following command:

    [4][default:/src/plans:0]# build mytutorialapp

The `hab-plan-build.sh` script checks dependencies, sets variables, creates a tarball (`.hart` file) of your package and installs your source files in `/hab/pkgs/ORIGIN/PACKAGENAME/VERSION/RELEASE` (for example, `/hab/pkgs/myorigin/mytutorialapp/0.1.0/20160521033718`) and your artifact file in `/src/results/`. The artifact is signed using the origin signature key and if you navigate to that directory you will see the source files copied over in the **do_install()** callback as well as the nconf module files.

Right now, your package builds, but will not do anything at runtime. The next step is to add hooks to your plan. These will copy over the correct files during initialization and start the npm binary.

<hr>
<ul class="main-content--button-nav">
  <li><a href="/tutorials/getting-started-add-hooks" class="button cta">Next - Add hooks to your plan</a></li>
  <li><a href="/tutorials/getting-started-review-source-files/">Back to previous step</a></li>
</ul>
