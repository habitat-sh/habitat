---
title: Creating your first plan
---

# Create your first plan
In the previous step of this tutorial, you saw the files that make up our Node.js application. Now it's time to create the package for that application. This step will show you how, starting with the blueprint for an artifact: the plan.

## Start with the basics
A plan is comprised of shell scripts that define how your application should be built, installed and behave at runtime; however, you can include other files such as configuration files or other binaries as well.

To create a plan, do the following:

1. In your terminal window, create a new directory called "mytutorialapp". This directory is known as the plan context. The following example places it in a "plans" directory at the root of the home directory.

       mkdir -p ~/plans/mytutorialapp

2. Change directories to your plan context.

       cd ~/plans/mytutorialapp

3. All plans must have a `plan.sh` at the root of the plan context. This file will be used by the `hab-plan-build` command to build your package, so create a plan.sh file in the mytutorialapp directory and open it.

       $EDITOR plan.sh

4. Copy the following template into plan.sh:

~~~ bash
pkg_origin=
pkg_name=
pkg_version=
pkg_maintainer="Your Name <your email address>"
pkg_license=()
pkg_source=http://example.com/${pkg_name}-${pkg_version}.tar.xz
pkg_shasum=sha256sum
pkg_deps=()
pkg_build_deps=()
pkg_bin_dirs=(bin)
pkg_include_dirs=(include)
pkg_lib_dirs=(lib)
~~~

<%= partial "/shared/new_plan_description" %>

## Modify the plan

We now have a skeleton plan, but we need to modify some of its settings before we can continue.

1. Set the `pkg_origin` value to the one created for you by `hab setup`. For the examples in this tutorial, it will be set to "myorigin". The "core" origin name is reserved. That name is used by the Habitat maintainers group to create foundational packages that you can use as dependencies in your packages. If you would like to browse them, they are located in the [plans directory](https://github.com/habitat-sh/habitat/tree/master/plans) of the Habitat repo.
2. Set the `pkg_name` value to "mytutorialapp".
3. Because this is a package for a Node.js app, follow semantic versioning and set the `pkg_version` to `0.1.0`.
4. Because this is a tutorial, you don't have to change the `pkg_maintainer` value to your email address; however, when you upload packages for others to consume, you should include your contact information.
5. Change the `pkg_source` value to point to the archive file that contains the source files described in the previous step. {::comment} Move this into a S3 bucket under the Habitat account before launch {:/comment}

        pkg_source=https://s3-us-west-2.amazonaws.com/nodejs-tutorial-app/nodejs-tutorial-app-0.1.0.tar.gz

6. Change the `pkg_shasum` value to the correct checksum for the tarball.

        pkg_shasum=2ad73b78ef5e88e9e916873c0f762bbdf286e4de93e67cf211f9761a2876c7ef

    > Note: If you modified the source files from the previous step and created your own archive, you will have to compute the sha256 value yourself. If your computed value does not match the value calculated by the `hab-plan-build` script, an error with the expected value will be returned when you execute your plan.

7. Our Node.js application depends on the `node` and `npm` binaries at runtime, so we need to include one of the core Habitat packages, `core/node`, as a runtime dependency. Transitive dependencies, such as `core/glibc` used by `core/node`, do not need to be listed when creating plans.

        pkg_deps=(core/node)

8. Remove the `pkg_build_deps` variable. Later on in this topic we are going to install the `nconf` module into our package, which requires the `npm` binary; however, we do not need to include `core/node` as a build dependency because the build script automatically installs build and runtime dependencies and adds their bin directories to the `$PATH` variable before building the package. So, if you need the same dependent binary for both build and runtime operations, you only need to include it as a runtime dependency.

9. The Node.js application does not create any new binaries or libraries of its own, so you can remove the following three lines:

        pkg_bin_dirs=(bin)
        pkg_include_dirs=(include)
        pkg_lib_dirs=(lib)

10. Because we eventually want to demonstrate how to run our Habitat service in a Docker container, we need to expose port 8080. This action exposes the port to other Docker containers; however, it does not publish this port for access by the host machine. We will do that in a later step. For now, add the following line to your plan:

        pkg_expose=(8080)

You've finished with the basic setup of your plan. It is time to move into defining how our source files from the previous step get installed into the mytutorialapp package through callbacks.

## Add in callbacks

Callbacks in a plan are simply overrides to existing functions that are called by the `hab-plan-build` script at build time. Because our source code in this tutorial relies on the `nconf` module, we need to make sure it's included in our package. Also, our `package.json` and `server.js` source files need to move from the tarball that we referenced in `pkg_source` into our package.

To do both of those actions, we will implement our own **do_build()** and **do_install()** callbacks. By default, these functions perform simple tasks like calling `make` and `make install`. Add the following function definitions to your `plan.sh` file below the plan settings.

~~~ bash
do_build() {
  # The nodejs-tutorial-app source code is unpacked into a directory,
  # nodejs-tutorial-app-0.1.0, at the root of $HAB_CACHE_SRC_PATH.

  # All of the source files need to be copied over into the $pkg_dirname
  # directory (mytutorialapp-0.1.0). If you were downloading an archive that
  # matched your package name and version, you would be able to omit this step.
  cp -vr ${HAB_CACHE_SRC_PATH}/nodejs-tutorial-app-0.1.0/* .

  # This installs both npm as well as the nconf module we listed as a
  # dependency in package.json.
  npm install
}

do_install() {
  # Our source files were copied over to the HAB_CACHE_SRC_PATH in do_build(),
  # so now they need to be copied into the root directory of our package through
  # the pkg_prefix variable. This is so that we have the source files available
  # in the package.
  cp package.json ${pkg_prefix}
  cp server.js ${pkg_prefix}

  # Copy over the nconf module to the package that we installed in do_build().
  mkdir -p ${pkg_prefix}/node_modules/
  cp -vr node_modules/* ${pkg_prefix}/node_modules/
}
~~~

> Note: The first line of the **do_build()** function is only required because our package name and version do not match the source file name and `pkg_prefix` refers to the fully-qualified package path directory.

Here's what your `plan.sh` should look like in the end:

~~~ bash
pkg_origin=myorigin
pkg_name=mytutorialapp
pkg_version=0.1.0
pkg_maintainer="Your Name <your email address>"
pkg_license=()
pkg_source=https://s3-us-west-2.amazonaws.com/nodejs-tutorial-app/nodejs-tutorial-app-0.1.0.tar.gz
pkg_shasum=2ad73b78ef5e88e9e916873c0f762bbdf286e4de93e67cf211f9761a2876c7ef
pkg_filename=nodejs-tutorial-app-0.1.0.tar.gz
pkg_deps=(core/node)
pkg_expose=(8080)


do_build() {
  # The nodejs-tutorial-app source code is unpacked into a folder,
  # nodejs-tutorial-app-0.1.0, at the root of $HAB_CACHE_SRC_PATH.

  # All of the source files need to be copied over into the $pkg_dirname
  # directory (mytutorialapp-0.1.0).
  cp -vr ${HAB_CACHE_SRC_PATH}/nodejs-tutorial-app-0.1.0/* .

  # This installs both npm as well as the nconf module we listed as a
  # dependency in package.json.
  npm install
}

do_install() {
  # Our source files were copied over to the HAB_CACHE_SRC_PATH in do_build(),
  # so now they need to be copied into the root directory of our package through
  # the pkg_prefix variable. This is so that we have the source files available
  # in the package.
  cp package.json ${pkg_prefix}
  cp server.js ${pkg_prefix}

  # Copy over the nconf module to the package that we installed in do_build().
  mkdir -p ${pkg_prefix}/node_modules/
  cp -vr node_modules/* ${pkg_prefix}/node_modules/
}
~~~

For a complete listing of all of the plan settings, callbacks, and runtime hooks, see the [Plan syntax guide](/docs/plan-syntax).

## Entering the studio and doing an initial build

1. Change directories back to your plan context.

       cd ~/plans/mytutorialapp

2. Enter into the studio environment.

   **Mac OS X**

       hab studio enter

   **Linux**

       sudo hab studio enter

   The studio is a minimal, [chrooted](https://en.wikipedia.org/wiki/Chroot) shell environment for you to build and test your Habitat packages. When you're running Mac OS X on your host machine, the studio runs inside a Docker container as root. On Linux, the `hab` CLI must get root permissions through the `sudo` command.

   The studio itself is a Habitat package, and all of the dependent packages for the studio will be downloaded, unpacked, and installed. The studio will also import the secret origin key created during `hab setup`.

   The download process should only take a few moments. If successful, you should see another bash prompt like this:

       [1][default:/src:0]#

   The `src` directory maps to the `~/plans/mytutorialapp` directory you were in before you entered the studio.

 3. Run the `build` command to build your package.

        [2][default:/src:0]# build

      > Note: If you entered the studio in the `~/plans` directory, then you would change the command to `build mytutorialapp`.

    Running `build` executes the `hab-plan-build` command which handles creating Habitat packages from plan files.  When executed, the script will check dependencies, set variables, install source files, and create a package.

    The last set of output messages from running `build` should look something like this:

        mytutorialapp: Building package metadata
        mytutorialapp: Writing configuration
        mytutorialapp: Writing service management scripts
        mytutorialapp: Stripping unneeded symbols from binaries and libraries
        mytutorialapp: Creating manifest
        mytutorialapp: Generating package artifact
        /hab/pkgs/core/tar/1.28/20160427205719/bin/tar: Removing leading `/' from member names
        /hab/cache/artifacts/.myorigin-mytutorialapp-0.1.0-20160603223638-x86_64-linux.tar (1/1)
        100 %       120.8 KiB / 910.0 KiB = 0.133
        » Signing /hab/cache/artifacts/.myorigin-mytutorialapp-0.1.0-20160603223638-x86_64-linux.tar.xz
        ☛ Signing /hab/cache/artifacts/.myorigin-mytutorialapp-0.1.0-20160603223638-x86_64-linux.tar.xz with myorigin-20160603183849 to create /hab/cache/artifacts/myorigin-mytutorialapp-0.1.0-20160603223638-x86_64-linux.hart
        ★ Signed artifact /hab/cache/artifacts/myorigin-mytutorialapp-0.1.0-20160603223638-x86_64-linux.hart.
        '/hab/cache/artifacts/myorigin-mytutorialapp-0.1.0-20160603223638-x86_64-linux.hart' -> '/src/results/myorigin-mytutorialapp-0.1.0-20160603223638-x86_64-linux.hart'
        mytutorialapp: hab-plan-build cleanup
        mytutorialapp:
        mytutorialapp: Source Cache: /hab/cache/src/mytutorialapp-0.1.0
        mytutorialapp: Installed Path: /hab/pkgs/myorigin/mytutorialapp/0.1.0/20160603223638
        mytutorialapp: Artifact: /src/results/myorigin-mytutorialapp-0.1.0-20160603223638-x86_64-linux.hart
        mytutorialapp: Build Report: /src/results/last_build.env
        mytutorialapp:
        mytutorialapp: I love it when a plan.sh comes together.
        mytutorialapp:
        mytutorialapp: Build time: 0m12s
        [3][default:/src:0]#

    The source files are stored in `/hab/pkgs/ORIGIN/PACKAGENAME/VERSION/RELEASE` (for example, `/hab/pkgs/myorigin/mytutorialapp/0.1.0/20160521033718`).  Listing the contents of that directory will show you the source files copied over in the **do_install()** callback as well as the nconf module files. By default, this location is ephemeral. When you exit the studio, the studio environment is destroyed and recreated the next time you enter it.

    The package created is stored in a relative `results` directory (for example, `/src/results/myorigin-mytutorialapp-0.1.0-20160521033718-x86_64-linux.hart`) that persists when you exit the studio.

Right now, your package builds, but will not do anything at runtime. The next step is to add hooks to your plan. These will link to the correct files during initialization and start the npm binary.

<hr>
<ul class="main-content--button-nav">
  <li><a href="/tutorials/getting-started-add-hooks" class="button cta">Next - Add hooks to your plan</a></li>
  <li><a href="/tutorials/getting-started-review-source-files/">Back to previous step</a></li>
</ul>
