# <a name="config-updates" id="config-updates" data-magellan-target="config-updates">Configuration updates</a>

One of the key features of Habitat is the ability to define an immutable package with a default configuration which can then be updated dynamically at runtime. You can update service configuration on two levels: individual services (for testing purposes), or a service group.


## Apply configuration updates to an individual service

When starting a single service, you can provide alternate configuration values to those specified in `default.toml`.

### Using a user.toml file

You can supply a `user.toml` containing any configuration data that you want to override default values. This file should be placed in the habitat `user` directory under the `config` subdirectory of the specific service directory that owns the configuration data. For example, to override the default configuration of the `myservice` service, this `user.toml` would be located at `/hab/user/myservice/config/user.toml`.

### Using an environment variable

Override default configuration data through the use of an environment variable with the following format: `HAB_PACKAGENAME='{"keyname1":"newvalue1", "tablename1":{"keyname2":"newvalue2"}}'`.

```shell
$ HAB_MYTUTORIALAPP='{"message":"Habitat rocks!"}' hab svc start <origin>/<packagename>
```

> Note: The preferred syntax used for applying configuration through environment variables is JSON but must be valid JSON input. The package name in the environment variable must be uppercase, any dashes must be replaced with underscores.

For multiline environment variables, such as those in a TOML table or nested key value pairs, it can be easier to place your changes in a .toml
file and pass it in using `HAB_PACKAGENAME="$(cat foo.toml)"`.

```shell
$ HAB_MYTUTORIALAPP="$(cat my-env-stuff.toml)" hab svc start <origin>/<packagename>
```

The main advantage of applying configuration updates to an individual service through an environment variable is that you can quickly test configuration settings to see how your service behaves at runtime. The disadvantages of this method are that configuration changes have to be applied to one service at a time, and you have to manually interrupt (Ctrl+C) a running service before changing its configuration settings again.

For an example of how to use an environment variable to update default configuration values, see [the Getting Started demo](/tutorials/get-started/demo/).

## Apply configuration updates to a service group
Similar to specifying updates to individual settings at runtime, you can apply multiple configuration changes to an entire service group at runtime using stdin from your shell or through a TOML file. These configuration updates can be sent in the clear or encrypted in gossip messages through [wire encryption](/docs/using-habitat/#using-encryption). Configuration updates to a service group will trigger a restart of the services as new changes are applied throughout the group.

### Usage
When submitting a configuration update to a service group, you must specify a peer in the ring to connect to, the version number of the configuration update, and the new configuration itself. Configuration updates can be either TOML passed into stdin, or passed in a TOML file that is referenced in `hab config apply`.

Configuration updates for service groups must be versioned. The version number must be an integer that starts at one and must be incremented with every subsequent update to the same service group. *If the version number is less than or equal to the current version number, the change(s) will not be applied.*

Here are some examples of how to apply configuration changes through both the shell and through a TOML file.

**Stdin**

```shell
$ echo 'buffersize = 16384' | hab config apply --peer 172.17.0.3 myapp.prod 1
```

**TOML file**

```shell
$ hab config apply --peer 172.17.0.3 myapp.prod 1 /tmp/newconfig.toml
```

  > Note: The filename of the configuration file is not important.

  > Note: 1 is the version number. Increment this for
  additional configuration updates.

    Your output would look something like this:

       » Applying configuration for myapp.prod incarnation 1
       Ω Creating service configuration
       ✓ Verified this configuration is valid TOML
       ↑ Applying to peer 172.17.0.3:9638
       ★ Applied configuration

  The services in the myapp.prod service group will restart.

       myapp.prod(SR): Service configuration updated from butterfly: acd2c21580748d38f64a014f964f19a0c1547955e4c86e63bf641a4e142b2200
       hab-sup(SC): Updated myapp.conf a85c2ed271620f895abd3f8065f265e41f198973317cc548a016f3eb60c7e13c
       myapp.prod(SV): Stopping
       ...
       myapp.prod(SV): Starting

#### Encryption

Configuration updates can be encrypted for the service group they are intended. To do so, pass the `--user` option with the name of your user key, and the `--org` option with the organization of the service group. If you have the public key for the service group, the data will be encrypted for that key, signed with your user key, and sent to the ring.

It will then be stored encrypted in memory, and decrypted on disk.
