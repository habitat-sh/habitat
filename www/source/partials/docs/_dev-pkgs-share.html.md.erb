## <a name="sharing-pkgs" id="sharing-pkgs" data-magellan-target="sharing-pkgs">Upload and Promote Packages</a>


While you can build and run Habitat packages without sharing them on [Habitat Builder](https://bldr.habitat.sh), uploading them there enables greater collaboration and automated package rebuilds as underlying dependencies or your connected GitHub repository are updated.

> Note: Habitat Builder can only build Linux based plans (`plan.sh`) at this time.

Setting up Habitat Builder is easily done on the website: these steps take you through connecting your local Studio development experience with Builder.

You interact with Habitat Builder by:

* Creating an account.
* Creating an origin, or being invited to join an origin that already exists.
* Setting up `hab` to authenticate with Builder.
* Uploading the keys for that origin.
* Connecting your Github Repos and opting into rebuilds.

Habitat Builder supports both public and private origins, packages, and Github repositories.

### Create a Builder account

If you haven't created an account yet, see the [Create a Builder Account](/docs/using-builder/#builder-account) section above.

### Create or join an existing origin

You can create your own origin in Builder or be invited to join an existing one. If you already built some Habitat packages on your local computer prior to signing up for an account, you must rename your local packages' `pkg_origin` if the origin you want already exists.

### Set up hab to authenticate to Builder

When you upload a package to Builder, you are required to supply an auth token as part of the `hab pkg upload` subcommand. You can generate a Habitat personal access token via the Builder site [Profile page](https://bldr.habitat.sh/#/profile) for use with the `hab` command-line utility.

Once you have this token, you can set the `HAB_AUTH_TOKEN` [environment variable](/docs/reference#environment-variables) to this value, so that any commands requiring authentication will use it.

### Create origin keys

After you have done the basic account creation steps, you need to create your origin keys. The private key will be used to sign your packages and the public key will be used by supervisors to verify the integrity of your packages (`.hart` files).

You can either create an origin key pair by running `hab setup` from your host machine, or running `hab origin key generate <originname>` from either the host machine or from within the studio.

Your keys are located at `~/.hab/cache/keys` on your host machine and `/hab/cache/keys` inside the studio environment.

### Upload the keys for your origin

If you created a new origin and/or Builder does not have the public key that corresponds to the private key used to build your package, you must upload it. You also have the ability to upload your private key; however, if you do not upload at least the public key, Builder will reject the upload of your packages for that origin.

You can upload keys for the origin through the web interface for Builder, or by using the `hab origin key upload` command. You must be authenticated using the access token described earlier before you can upload keys.

### Upload packages to Builder

Once Builder possesses at least the public key of the origin, you may upload one or more packages to that origin by using the `hab pkg upload` command. Builder will check the cryptographic integrity of the package before allowing you to upload it. Uploading packages is also a privileged operation for which you must have the access token.

### Promote packages

<%= partial "/partials/global/channel-overview" %>

By default, newly uploaded packages are placed in the `unstable` channel, however, the default package that is downloaded is the latest `stable` version of a package, unless overridden in commands such as `hab svc start`, `hab svc load`, and `hab install`. If you want to promote your package to the `stable` channel, run the `hab pkg promote` command as follows:

```shell
$ hab pkg promote -z <OAuth_token> origin/package/version/release stable
```

> **Note** You can also promote packages to the `stable` channel using the *promote to stable* button in the web app.

For more information on how to use channels, see [Continuous Deployment Using Channels](/docs/using-habitat/#continuous-deployment).

### Running packages from Builder

> **Note:** When running private packages from Builder, it's necessary to add your [Habitat access token](/docs/using-builder/#builder-token) to the machine where you intend to deploy the package, via `export HAB_AUTH_TOKEN=<token>`.

You can instruct the Supervisor to download and run packages from Builder by using the `hab sup run` command, for example:

```shell
$ hab sup run core/postgresql
```

If the Supervisor does not have the `core/postgresql` package in its local cache, it will contact Builder, retrieve the latest version and the public key for the `core` origin, verify the cryptographic integrity of the package, and then start it.

You may also supply a `--channel` argument to instruct the Supervisor to use a different channel for the purposes of continuous deployment:

```shell
$ hab sup run core/postgresql --channel unstable
```

### Running packages from exported tarballs

An exported tarball package contains the Habitat client/binary as well as dependencies specified by your artifact.

After deploying the tarball to your target server, extract the contents to the root filesystem (`/`):

```shell
$ tar zxf core-nginx-1.11.10-20170616000025.tar.gz --directory /
```

You can instruct the Supervisor to run packages from an exported tarball:

```shell
$ /hab/bin/hab svc start core/nginx
```

Note: On a clean server, this will download additional packages to satisfy the Supervisor dependencies. You will also require a `hab` group and `hab` user on the system for most services.
