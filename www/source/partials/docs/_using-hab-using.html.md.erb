# <a name="using-habitat">Using Habitat</a>

This guide will explain the basics of using the Habitat cli to install, run, and configure packages. We'll cover the particulars of a few commonly used `hab` commands and explain how to use Habitat for managing applications.

## Concepts

Let's level set on a couple of things. If you have the time it would definitely be beneficial for you to read through the [glossary section](/docs/glossary) which is going to contain lots of high-level conceptual information on the various aspects of the habitat framework.

<%= partial "/partials/docs/glossary-plan" %>

<%= partial "/partials/docs/glossary-supervisor" %>

<%= partial "/partials/docs/glossary-hab" %>

# 'Hab Search': Finding packages

The Habitat core team maintains a significant number of packages for public use under the `core` origin on [builder](/docs/glossary/#glossary-builder). Each of these plans have been written to make them as accessible for mass consumption as possible.

The primary way to discover an available package from the command line is with the `hab pkg search` subcommand.

For example `hab pkg search httpd` query builder to find all of the available packages that might reference httpd. In this case:
    
```terminal
core/httpd/2.4.18/20160612153110
core/httpd/2.4.18/20160708172711
core/httpd/2.4.23/20160728171751
core/httpd/2.4.23/20160729212027
core/httpd/2.4.23/20160810130552
core/httpd/2.4.23/20160911114419
core/httpd/2.4.23/20160923003340
core/httpd/2.4.23/20160926161937
core/httpd/2.4.23/20161031045210
core/httpd/2.4.23/20161102155548
core/httpd/2.4.23/20161209201224
core/httpd/2.4.23/20161214055221
core/httpd/2.4.23/20170210200720
core/httpd/2.4.23/20170215212244
core/httpd/2.4.23/20170514041552
core/httpd/2.4.23/20170825175310
core/httpd/2.4.27/20170828234114

```

If we wanted to access the same information from a web browser we can do so via builder's front end.

```bash
https://bldr.habitat.sh/#/pkgs/core
```

The full source for any packages in core will always be made available via GitHub as well:

```bash
https://www.github.com/habitat-sh/core-plans
``` 

# 'Hab Install': Installing Packages

To install a discovered package, use the `hab pkg install` command. The subcommand has a couple of options and flags but typically you'll want to provide at least an origin and package name.

```bash
$ hab pkg install core/httpd
```
By default the hab cli will pull the latest release of the latest version of curl from the channel `stable`. In the case of our example previously, the fully qualified package that will be installed is `core/httpd/2.4.27/20170828234114` along with all of it's habitized dependencies.

```bash
$ hab pkg install core/curl                                        

» Installing core/httpd from channel 'stable'
↓ Downloading core/httpd/2.4.27/20170828234114
    4.73 MB / 4.73 MB - [===============================================] 100.00 % 6.24 MB/s  
☛ Verifying core/httpd/2.4.27/20170828234114
→ Using core/acl/2.2.52/20170513213108
↓ Downloading core/apr-util/1.5.4/20170514002301
    195.28 KB / 195.28 KB / [===============================================] 100.00 % 9.34 MB/s  
☛ Verifying core/apr-util/1.5.4/20170514002301
↓ Downloading core/apr/1.5.2/20170514002236
    243.55 KB / 243.55 KB \ [===============================================] 100.00 % 8.80 MB/s  
☛ Verifying core/apr/1.5.2/20170514002236
→ Using core/attr/2.4.47/20170513213059
→ Using core/binutils/2.25.1/20170513201927
→ Using core/cacerts/2017.01.18/20170513215104
↓ Downloading core/expat/2.1.0/20170513213726
    86.70 KB / 86.70 KB \ [===============================================] 100.00 % 8.29 MB/s  
☛ Verifying core/expat/2.1.0/20170513213726
→ Using core/gcc-libs/5.2.0/20170513212920
→ Using core/glibc/2.22/20170513201042
→ Using core/grep/2.22/20170513213444
↓ Downloading core/libiconv/1.14/20170514021726
    527.97 KB / 527.97 KB \ [===============================================] 100.00 % 5.45 MB/s  
☛ Verifying core/libiconv/1.14/20170514021726
→ Using core/linux-headers/4.3/20170513200956
→ Using core/openssl/1.0.2j/20170513215106
→ Using core/pcre/8.38/20170513213423
→ Using core/sed/4.2.2/20170513213123
→ Using core/zlib/1.2.8/20170513201911
✓ Installed core/apr-util/1.5.4/20170514002301
✓ Installed core/apr/1.5.2/20170514002236
✓ Installed core/expat/2.1.0/20170513213726
✓ Installed core/libiconv/1.14/20170514021726
✓ Installed core/httpd/2.4.27/20170828234114

```

You can however provide `hab pkg install` a fully qualified package ident and this specific release and version will be retrieved.

# Inspect plan tuneables
Habitat core packages will have overrideable options to tune the configuration of the package when you're ready to start it. Those options may not fit your environment. You can get a concise list of the available tuneables of a package with the `hab pkg config` subcommand.

```terminal
$ hab pkg config core/curl

serveradmin = "you@example.com"
servername = "localhost"
serverport = "80"
serversignature = "Off"
servertokens = "Full"
timeout = 60
user = "hab"

[mod_info]
allow = "127.0.0.1"

[mod_proxy]
allow = "None"
deny = "All"
order = "Deny, Allow"
require = "All Denied"
```
(The above is not the full list of tunables for this package. Truncated for readability.)

# Running a package
Habitat packages can be exported to run in [several different ways](/docs/glossary/#glossary-packages) however for the sake of this guide we're going to adopt the simplest example.

Run the `hab svc start` command with the package ident to start a service.

```terminal
$ hab svc start core/httpd
hab-sup(MR): Starting http-gateway on 0.0.0.0:9631
hab-sup(MR): Starting core/httpd
httpd.default(SR): Hooks recompiled
default(CF): Updated httpd.conf 1fdac7f7831648aa12b81be614ed77e0e87166e79963d42f089e5c5c4bd20745
httpd.default(SR): Configuration recompiled
httpd.default(SR): Initializing
httpd.default(SV): Starting service as user=root, group=root
httpd.default(O): [Wed Sep 20 18:09:18.591154 2017] [ssl:warn] [pid 15407] AH01873: Init: Session Cache is not configured [hint: SSLSessionCache]
httpd.default(O): [Wed Sep 20 18:09:18.594558 2017] [mpm_prefork:notice] [pid 15407] AH00163: Apache/2.4.27 (Unix) OpenSSL/1.0.2j configured -- resuming normal operations
httpd.default(O): [Wed Sep 20 18:09:18.594594 2017] [core:notice] [pid 15407] AH00094: Command line: 'httpd -D FOREGROUND -f /hab/svc/httpd/config/httpd.conf
```

This will start up the requested package with it's default configuration and does not join the 

# Tune a package
Without providing any configuration options or flags a Supervisor will be started and the Supervisor will manage the process of the requested package. It will not be joined to a Supervisor ring. To provide a new configuration at runtime you have [several options]().