# <a name="using-packages" id="using-packages" data-magellan-target="using-packages">Running Habitat Packages</a>

Habitat packages used to start services are run under the Habitat Supervisor. At runtime, you can join Supervisors together in a service group running the same topology, send configuration updates to that group, and more. You can also export the Supervisor together with the package to an external immutable format, such as a Docker container or a virtual machine.

## Running single packages for testing

Packages can be tested in the interactive studio environment or natively on a host machine running Linux.

When entering an interactive studio, a Supervisor is started for you in the background. To run packages inside of this Supervisor:

1. [Build your package](/docs/developing-packages/#plan-builds) inside an interactive studio. Do not exit the studio after it is built.
2. To start your service in the running Supervisor, type `hab sup start yourorigin/yourname`, substituting the name and origin of the package you built in step 1. Your service should now be running.

Because the Supervisor is running in the background, you will not see the Supervisor output as you start your service. However you can use the `sup-log` (Supervisor log) command that will stream the tail of the Supervisor output.

If your host machine is running Linux, do the following to run your packages:

* Add the `hab` user and group.

    ```
    $ sudo adduser --group hab
    $ sudo useradd -g hab hab
    ```

* Run the `hab` CLI as root.

    ```
    $ sudo hab start yourorigin/yourname
    ```

## Running packages in any environment

The `hab` program can also be installed on servers. It will retrieve the necessary components (like the current release of the Supervisor) in order to run packages. Thus, you can start the Supervisor on any compatible system.

To start the Supervisor, you can write an init script or a systemd unit file. For example, for systemd:

    [Unit]
    Description=The Habitat Supervisor

    [Service]
    ExecStart=/bin/hab sup run

    [Install]
    WantedBy=default.target

Next use `hab svc load` to load one or more services into the Supervisor for permanent supervision. Using the example from above:

    $ sudo hab svc load yourorigin/yourname

## Running a package on a virtual machine (VM)

After you have built the hart package, do the following:

1. Spin up a Virtual Machine.
2. Securely copy the .hart package from your local workstation onto the virtual machine. SCP is a widely-used tool to do this; however, you can also use FTP or whatever tool you use to copy things from your local workstation to a remote server.
3. SSH into the virtual machine.
4. In the virtual machine - run these commands:

     1. Install Habitat

        ```
        $ curl https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash
        ```

     2. Install the package (which should be on the virtual machine)

        ```
        $ sudo hab install your_package.hart
        ```

     3. Create the Habitat group

        ```
        $ sudo groupadd hab
        $ sudo useradd -g hab hab
        ```

     4. Start the package

        ```
        $ sudo hab start your_origin/your_package
        ```


## Starting only the Supervisor

Starting the Supervisor is as simple as running:

    $ hab sup run

This command also lets you override the default gossip and http gateway binding ports, just like when using `hab start`.

## Running the Supervisor with a Host's init System

Only one system service needs to be added. Your choice of Linux distribution may dictate which init system is in use (i.e. SysVinit, Systemd, runit, etc), but all options boil down to simply running `hab sup run` as the runnable program. The following example assumes that the Habitat program `hab` is installed, binlinked as `/bin/hab`, and a `hab` user and group are present.

For example, a suitable Systemd unit would simply be:

```
[Unit]
Description=The Habitat Supervisor

[Service]
ExecStart=/bin/hab sup run

[Install]
WantedBy=default.target
```

It is important to start the Supervisor via the `hab` program as upgrades to the `core/hab` Habitat package will also upgrade the version of the Supervisor on next start.

## Loading a Service for Supervision

To add a service to a Supervisor, you use the `hab svc load` subcommand. It has many of the same service-related flags and options as `hab start`, so there's nothing extra to learn here (for more details, read through the [Run packages sections](/docs/using-habitat)). For example, to load `yourorigin/yourname` in a Leader topology, a Rolling update strategy and a Group of "acme", run the following:

    $ hab svc load yourorigin/yourname --topology leader --strategy rolling --group acme

Running the `hab svc load` subcommand multiple times with different package identifiers will result in multiple services running on the same Supervisor. Let's add `core/redis` to the Supervisor for some fun:

    $ hab svc load core/redis

## Unloading a Service from Supervision

To unload and remove a service from supervision, you use the `hab svc unload` subcommand. If the service is was running, then it will be stopped first, then removed last. This means that the next time the Supervisor is started (or restarted), it will not run this unloaded service. For example, to remove the `yourorigin/yourname` service:

    $ hab svc unload yourorigin/yourname

## Stopping a Loaded Running Service

Sometimes you need to stop a running service for a period of time, for example during a maintenance outage. Rather than completely removing a service from supervision, you can use the `hab svc stop` subcommand which will shut down the running service and leave it in this state until you start it again with the `hab svc start` subcommand, explained next. This means that all service-related options such as service topology, update strategy, etc. are preserved until the service is started again. For example, to stop the running `core/redis` service:

    $ hab svc stop core/redis

## Starting a Loaded Stopped Service

To resume running a service which has been loaded but stopped (via the `hab svc stop` subcommand explained above), you use the `hab svc start` subcommand. Let's resume our `core/redis` service with:

    $ hab svc start core/redis

## Querying the Supervisor for service status

You can query all services currently loaded or running under the local Supervisor using the `hab sup status` command. This command will list all persistent services loaded by the Supervisor along with their current state. It will also list transient services that are currently running or in a `starting` or `restarting` state. The `status` command includes the version and release of the service and for services that are running, it will include the `PID` of the running service.

To retrieve status for an individual service, you can pass the service identifier:

```
$ hab sup status core/mysql
```

The following exit codes are emitted by the `status` command:

* `0` - The status command successfully reports status on loaded services
* `1` - A generic error has occured calling the `hab` cli
* `2` - A service identifier was passed to `hab sup status` and that service is not loaded by the Supervisor
* `3` - There is no local running Supervisor

