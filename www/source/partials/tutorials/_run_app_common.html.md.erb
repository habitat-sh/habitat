Services can currently be run in two ways: natively on a modern, 64-bit Linux distribution with the kernel version 
greater than 2.6.32, or in a supported external runtime format. Running services natively allows you to rapidly install 
and test your services on bare metal machines or VMs, but exporting your package into a different runtime 
format provides flexibility in where your packages run.

Because this version of the tutorial shows how to use Habitat with Docker containers, we will use Docker Compose to run the containers created in the previous step.

## Update the docker-compose.yml File

When you cloned the `habitat-example-plans` repo, a `docker-compose.yml` file was included in the root of the `myrailsapp` directory.

```yaml
version: '3'
services:
  db:
    image: core/postgresql
    volumes:
      - "./updated_config.toml:/updated_config.toml"
  railsapp:
      image: originname/myrailsapp
      ports:
        - 8000:8000
      links:
      - db
      command: --peer db --bind database:postgresql.default
```

Let's quickly review the file to understand how these containers will be brought up.

* The images for both the database and your Rails application are already installed on your local workstation as part of the `export` subcommand you ran in the last step.

* As part of updating the configuration values to connect the Rails application to the PostgreSQL database, you will use a TOML file to send configuration updates between Supervisors connected together in the ring. The `updated_config.toml` file is bind mounted from the root location of the `myrailsapp` directory to the root directory of the database container.

* The port number for the Rails container is exposed so you can view the Rails app page from within your host browser.

* The entrypoint for the Rails container has a few additional command arguments to connect it to the database container and set the binding to the appropriate database service group.

Now that you understand how the docker-compose.yml file will be used, open the docker-compose.yml file in a text editor and update the following line with the name of your origin.

```yaml
image: originname/myrailsapp
```

Save the file and exit the editor.