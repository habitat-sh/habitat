The goal for of this tutorial is for you to create a portable, immutable, cryptographically-signed package that contains an application, its runtime dependencies, and its tunable configuration data. To start this process, you must create a plan.

A plan is a directory comprised
of shell scripts and optional configuration files that define how you download, configure, make, install, and manage the lifecycle of the
software in the Habitat package. Creating a plan starts with identifying and referencing the application code for your package. 

Habitat provides several different ways to refer and include application code in your package: by downloading a tarball of the source and compiling it when building the package, by referring to a local source directory, or by using a pre-built binary and bundling it up in your package.

To demonstrate using Habitat with project source code, you are going to fork and clone a simple Rails web
application and then add your plan to that web application. By having the Habitat plan live in the same directory as your project, they can be versioned and maintained together in one location.

## Get the sample application source code

The Ruby-on-Rails web application in this tutorial is a simple web app that connects to a backend PostgreSQL database. It was created
by running `rails new mywebapp --database=postgresql` to reference the use of PostgreSQL instead of the default database for most Rails
apps, SQLite3. A new root "Hello World" index page and a model were added to the site to support pulling and displaying data from the
PostgreSQL database.

<% if !is_windows %>
Open a new terminal window on your workstation and perform the following steps:
<% end%>

<% if is_windows %>
Open a new PowerShell window on your workstation and perform the following steps:
<% end %>

<% if is_windows %>
1. Change the default Git for Windows CRLF line endings setting to be LF line endings.

    ```powershell
    PS > git config --global core.eol lf
    PS > git config --global core.autocrlf input
    ```
<% end %>

1. Fork the <%= link_to ' sample application repo', 'https://github.com/habitat-sh/habitat-example-plans', target: '_blank' %>  in the GitHub UI by navigating to the top-right corner of the page and clicking the `Fork` button. Select the org destination to fork the repo into.

1. Clone your forked `sample-rails-app` repo onto your local machine. In this example, a directory called `sample-rails-app` will be created
in the `$HOME` directory.

<% if !is_windows %>
    ```console
    $ cd ~
    $ git clone https://github.com/yourorg/habitat-example-plans
    ```
<% end %>

<% if is_windows %>
    ```powershell
    PS > cd ~
    PS > git clone https://github.com/yourorg/habitat-example-plans
    ```
<% end%>

1. After you have successfully cloned the repo, change directory to the `myrailsapp` directory.

<% if !is_windows %>
    ```console
    $ cd ~/sample-rails-app/myrailsapp
    ```
<% end %>

<% if is_windows %>
    ```powershell
    PS > cd .\sample-rails-app\myrailsapp
    ```
<% end%>

## Start with the Basics

At a bare minimum, a plan must have a `plan.sh` at the root of the directory. This file specifies where the source code or binary is, how
it should be built, and how the [Supervisor](/docs/glossary#glossary-supervisor) should start the application or service it at runtime. 

To create your plan, do the following in your terminal window:

1. From within the `myrailsapp` directory, run `hab plan init -s ruby`. Because the myrailsapp web application is a Rails application, specifying `-s ruby` will create a plan that references the Ruby scaffolding.

<% if !is_windows %>
    ```console
    $ hab plan init -s ruby
    ```
<% end %>

<% if is_windows %>
    ~~~powershell
    PS > hab plan init -s ruby
    ~~~
<% end%>

    A scaffolding is a meta-package for applications and services that provide a default configuration and behavior experience to get application developers up and running quickly with Habitat.  

    And if you set up PostgreSQL as your database (as we did in the myrailsapp sample code), the Ruby scaffolding will create configuration and credential information to connect to that database. For more information on scaffoldings, see the scaffolding [concepts topic](/docs/glossary#glossary-scaffolding).

2. Now that you have created a basic plan, change directories into your newly-created `habitat` sub-directory and open plan.sh in your text editor.

    Your `plan.sh` should now look like this:

    ```bash
    pkg_name=myrailsapp
    pkg_origin=<originname>
    pkg_version="0.1.0"
    pkg_scaffolding="core/scaffolding-ruby"
    ```
    > **Note** The origin name that you used when you ran `hab setup` during [Download and Install](/tutorials/download/) is used to populate the `pkg_origin` variable in your plan.sh file.

3. As part of the `health_check` hook that you will create in the next step, you also need to add a runtime dependency on `core/curl`.

    ```bash
    pkg_deps=( core/curl )
    ```
For more information on other plan settings, see [Basic Settings](/docs/reference#plan-settings).

## Finished Plan

Your finished plan should look like the following:

    pkg_name=myrailsapp
    pkg_origin=<originname>
    pkg_version="0.1.0"
    pkg_scaffolding="core/scaffolding-ruby"
    pkg_deps=( core/curl )

Now it is time to add custom health monitoring to your plan.
