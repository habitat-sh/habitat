section
 h1 Connect to a Database

 - if "#{current_page.data.platform_short}" == "ruby"
   p As part of the parsing logic of your Gemfile, the Ruby scaffolding detects any database gems that you have added and modifies the <code>init</code> hook and other setup scripts that it creates to provide a default customizable configuration behavior. The connection logic provided in the scaffolding also allows you to connect your web application to a database in a number of ways such as through containers, virtual machines, database cloud services, and so on.

   p The Ruby scaffolding will set up this connection logic for PostgreSQL databases assuming your Gemfile contains any of the following PostgreSQL database gems specified in the #{link_to 'Ruby scaffolding reference topic','https://github.com/habitat-sh/core-plans/blob/master/scaffolding-ruby/doc/reference.md#postgresql-database-detection'}.

 p This topic covers the following areas:

 ul
  li #{link_to 'Setting service bindings','#setting-bindings'} 
  - if "#{current_page.data.platform_short}" == "node"
    li #{link_to 'Defining database connection logic','#connection-logic'}
  - if "#{current_page.data.platform_short}" == "aspnet-core"
    li #{link_to 'Defining database connection logic','#connection-logic'}
  - if "#{current_page.data.platform_short}" != "aspnet-core"
    li #{link_to 'Setting database connection values','#setting-values'}
  li #{link_to 'Connecting to a database running inside a Docker container','#connect-docker'}
  - if "#{current_page.data.platform_short}" == "ruby"
    li #{link_to 'Connecting to a PostgreSQL cluster running in VMs','#connect-vms'}
    li #{link_to 'Connecting to an Amazon RDS Database','#connect-rds'}

 h2 <a name="setting-bindings">Setting service bindings</a>

 p Service bindings allows runtime configuration values for one service group to be shared with another service group, forming a producer/consumer relationship. When you want to share out configuration data with another service group, you must add the <code>pkg_exports</code> setting to your plan.
 
 - if "#{current_page.data.platform_short}" == "aspnet-core"
   p The following shows how a plan.ps1 exports a port key for consuming services, such as a reverse proxy or load balancer.

   = code(:bash) do
     |
      $pkg_exports=@{"port"="port"}

   p This will expose the following from the default.toml:

 -else
   p The following shows how the #{current_page.data.platform} scaffolding exports a port key for consuming services, such as a reverse proxy or load balancer.

   = code(:bash) do
     |
      pkg_exports=([port]=app.port)

   p This will expose the following from the default.toml created by the scaffolding:

 = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_app_port"

 p  Conversely, if your web application wants to bind to a key, such as a port from a database, you need to either use the <code>pkg_binds</code> or <code>pkg_binds_optional</code> settings in your plan. This requires that you know what keys are exported by the producer service group.

 = partial "/partials/global/exports_examples"

 p Once you have identified the key or keys of the producer that you want to consume in your web application, add that information to your plan file.

 - if "#{current_page.data.platform_short}" == "aspnet-core"
   = code(:bash) do
     |
      $pkg_binds=@{ "database"="username password port" }
 - else
   = code(:bash) do
     |
      pkg_binds=( [elasticsearch]="http-port transport-port" )

 p For more examples and information on binding, see #{link_to 'Runtime Binding','/docs/developing-packages#pkg-binds'}.

 - if "#{current_page.data.platform_short}" == "ruby"
   blockquote
    p <b>Important</b> If the Ruby scaffolding detects that your web application references the <code>pg</code> gem in your Gemfile.lock, the scaffolding will create and set <code>pkg_binds_optional</code> to a binding called "database" with the key called "port". This maps to the exported key named "port" from the <code>core/postgresql</code> package.
 - if "#{current_page.data.platform_short}" == "node"
   h2 <a name="connection-logic">Defining database connection logic</a>

   p At the most basic level, connecting to a database like MongoDB from a Node.js web application requires setting the connection scheme (<code>mongodb</code>) and host. One way to do this is to create a templated configuration file that can be referenced from within your #{current_page.data.platform} web application. You can then load that configuration file into your main JS file used to bootstrap your application. 

   p This templated configuration data could reside in a JSON file under <code>habitat/config</code>. By placing the file in the <code>config</code> folder, it will get copied into the <code>/hab/svc/&lt;package>/config</code> directory at runtime and rendered with the appropriate values. And because of the Handlebars helper logic, the <code>host</code> and <code>port</code> values will be derived from the database service binding information gossipped around the Supervisor ring between the web application and database service groups. In this example, the <code>host</code> and <code>port</code> configuration values will be set to the first member of the service group that the web application is bound to.

   p <b>Example config.json</b>

   = code(:json) do
     |
      {
        "mongo": {
           {{~#eachAlive bind.database.members as |member|}}
             {{~#if @first}}
               "host" : "{{member.sys.ip}}",
               "port" : "{{member.cfg.port}}"
             {{~/if}}
           {{~/eachAlive}}
        }
      }

   p After creating the configuration file, you need to be able to reference it from within your web application. In your plan.sh file, use a #{link_to 'scaffolding environment variable',"/tutorials/build-your-own/#{current_page.data.platform_short}/define-variables"} that references the path to your templated configuration file, such as in the example below:

   = code(:bash) do
     |
      declare -A scaffolding_env

      # Define path to config file
      scaffolding_env[APP_CONFIG]="{{pkg.svc_config_path}}/config.json"

   p You can now use modules such as <code>dotenv</code> and <code>nconf</code> to load these configuration values into your application and use them to connect to your database. 

   p <b>Example app.js</b>

   = code(:javascript) do
     |
      const nconf = require('nconf');
      const mongoose = require('mongoose');
      ...
      // Load configuration data.
      nconf.file({ file: process.env.APP_CONFIG });
      
      // Create the connection string.
      var dbConnectionString = 'mongodb://' + nconf.get('mongo')['host'] + ':' + nconf.get('mongo')['port'];

      // Connect to the database using Mongoose.
      console.log("Connecting to Database");
      mongoose.connect(dbConnectionString, { useMongoClient: true});

 - if "#{current_page.data.platform_short}" == "aspnet-core"
   h2 <a name="connection-logic">Defining database connection logic</a>

   p At the most basic level, connecting to a database like MySql from a #{current_page.data.platform} application requires setting the connection string parameters. One way to do this is to create a templated configuration file that can be referenced from within your #{current_page.data.platform} application. You can then load that configuration file into your main <code>startup.cs</code> file used to bootstrap your application. 

   p This templated configuration data could reside in a JSON file under <code>habitat/config</code>. By placing the file in the <code>config</code> folder, it will get copied into the <code>/hab/svc/&lt;package>/config</code> directory at runtime and rendered with the appropriate values. And because of the Handlebars helper logic, the <code>server</code>, <code>uid</code>, <code>pwd</code>, and <code>port</code> values will be derived from the database service binding information gossipped around the Supervisor ring between the web application and database service groups. In this example, these configuration values will be set to the first member of the service group that the web application is bound to.

   p <b>Example appsettings.json</b>

   = code(:json) do
     |
      {
        "server.urls": "http://*:{{cfg.port}}",
        "ConnectionStrings": {
          "DefaultConnection": "server={{bind.database.first.sys.ip}};uid={{bind.database.first.cfg.username}};pwd={{bind.database.first.cfg.password}};port={{bind.database.first.cfg.port}};database=habitat_aspnet_sample;"
        },
        "Logging": {
          "IncludeScopes": false,
          "LogLevel": {
            "Default": "Warning"
          }
        },
        "ApplicationConfigurations": {
            "ImportantMessage": "{{cfg.important_message}}"
        }
      }

   p After creating the configuration file, you need to be able to reference it from within your web application. In your plan.ps1 file, use a #{link_to 'environment variable',"/tutorials/build-your-own/#{current_page.data.platform_short}/define-variables"} that references the path to your templated configuration file, such as in the example below:

   = code(:bash) do
     |
      function Invoke-SetupEnvironment {
        Set-RuntimeEnv "HAB_CONFIG_PATH" $pkg_svc_config_path
      }

   p You can now implement the <code>Startup</code> and <code>ConfigureServices</code> methods in your <code>startup.cs</code> to load these configuration values into your application and use them to connect to your database. 

   = code(:javascript) do
     |
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Environment.GetEnvironmentVariable("HAB_CONFIG_PATH") ?? env.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: false)
                .AddEnvironmentVariables();
            Configuration = builder.Build();
        }

        public void ConfigureServices(IServiceCollection services)
        {
            services.Configure<ApplicationConfigurations>(
              Configuration.GetSection("ApplicationConfigurations"));

            services.AddMvc();

            services.AddDbContext<MessageContext>(options => options.UseMySql(Configuration.GetConnectionString("DefaultConnection")));
        }

 - if "#{current_page.data.platform_short}" != "aspnet-core"
   h2 <a name="setting-values">Setting database connection values</a>

   = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_database"

 h2 <a name="connect-docker">Connecting to a database running inside a Docker container</a>

 p This is the easiest scenario and useful for local testing of service binding between your database package. 

 - if "#{current_page.data.platform_short}" == "ruby"
   p Assuming you are connecting to a PostgreSQL database, export the <code>core/postgresql</code> package to a Docker container.
 - if "#{current_page.data.platform_short}" == "aspnet-core"
   p If you are connecting to a MySql database, export the <code>core/mysql</code> package to a Docker container.
 - else
   p If you are connecting to a MongoDB database, export the <code>core/mongodb</code> package to a Docker container.

 - if "#{current_page.data.platform_short}" != "aspnet-core"
   = code(:shell) do
     |
      $ hab studio enter

 - if "#{current_page.data.platform_short}" == "ruby"
   = code(:studio) do
     |
      # hab pkg export docker core/postgresql && exit
 - if "#{current_page.data.platform_short}" == "node"
   = code(:studio) do
     | 
      # hab pkg export docker core/mongodb && exit
 - if "#{current_page.data.platform_short}" == "aspnet-core"
   = code(:studio) do
     |
      PS C:\> hab pkg export docker core/mysql

 p Once you've created Docker containers for both your web application and your database, you can either open two terminal windows and start them up via <code>docker run</code> commands, or use Docker Compose to start them up together. 

 h3 Using containers directly

 p If you want to run the Docker containers directly, open two terminal windows and run the following:

 - if "#{current_page.data.platform_short}" == "ruby"
   = code(:shell) do
     |
      $ docker run -it core/postgresql

   = code(:shell) do
     |
      $ docker run -it <origin>/<package> --peer <DB_IP_ADDRESS> --bind database:postgresql.default
 - if "#{current_page.data.platform_short}" == "node"
   = code(:shell) do
     |
      $ docker run -it core/mongodb

   = code(:shell) do
     |   
      $ docker run -it <origin>/<package> --peer <DB_IP_ADDRESS> --bind database:mongodb.default
 - if "#{current_page.data.platform_short}" == "aspnet-core"
   = code(:shell) do
     |
      PS C:> docker run -it core/mysql

   = code(:shell) do
     |   
      PS C:\> docker run -it <origin>/<package> --peer <DB_IP_ADDRESS> --bind database:mysql.default

 p The example above requires that you get the IPv4 address of the running database container, which you can retrieve by using the <code>docker inspect</code> command.

 = code(:shell) do
   |
    $ docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' CONTAINERID

 - if "#{current_page.data.platform_short}" == "aspnet-core"
   h3 Creating initial database schema

   p Before you can invode your web applcation endpoint and expect a successful response, the initial database schema will need to be created. If you are following along with the <code>habitat-aspnet-sample</code> application, then you can build and run its <code>sample-migrator</code> plan.

   = code(:studio) do
     |
      PS C:\> hab studio enter
      PS C:\> build hab-migrator
      PS C:\> Stop-Supervisor
      PS C:\> hab sup start <origin>/sample-migrator --bind database:mysql.default --peer <DB_IP_ADDRESS>

   p After building the migrator, this stops the Studio's background Supervisor so that the next command will start a new Supervisor instance that will peer with the running MySql container. The migrator will perform the migration and then sleep indefinitely. So after you see the message: <code>migrated db</code>, you can exit this "throw away" studio.

   p You should now be able to access the web application and receive a 200 OK response:

   = code(:studio) do
     |
      PS C:\> Invoke-WebRequest http://<WEB_IP_ADDRESS>:8090/ -UseBasicParsing -Method head

 - else
   h3 Using Docker Compose

   p The other option is to use a tool such as Docker Compose to bring up both services. The <code>docker-compose.yml</code> used in the #{link_to 'Run the Sample App', 'https://www.habitat.sh/tutorials/sample-app/mac/run-app/'} step of the Build a Sample App tutorial can be modified and used for your iterative development needs.

   p Create a <code>docker-compose.yml</code> to bring up both your web application and database containers. The volume being shared assumes that you place the <code>docker-compose.yml</code> at the root of your local project repo.

   p Replace <code>origin/package</code> with the values for your web application.

   = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_docker_compose"

   p The next step is to bring up the containers.

   = code(:shell) do
     |
      $ docker-compose up

   - if "#{current_page.data.platform_short}" == "ruby"
     p As the Habitat packages initialize, you should see an error in the output that specifies that your web application cannot connect to the database container. This is because the particular database specified by your web application (<code>yourapp_production</code>) has not been set up, so you will need to do this manually. The credentials you provided in your <code>habitat/default.toml</code> file will give you the permission to do this when running the following command:

     = code(:shell) do
       |
        $ docker-compose exec yourapp yourapp-rake db:setup

   p Your web app and database should now be up and running in Docker containers. You can validate this on your local workstation by browsing to #{link_to 'https://localhost:8000/endpoint','https://localhost:8000/endpoint'}. 

 - if "#{current_page.data.platform_short}" == "ruby"
   h2 <a name="connect-vms">Connecting to a PostgreSQL cluster running in VMs</a>

   p If you need to run your own PostgreSQL cluster, this section will show you how to do so by running the <code>core/postgresql</code> Habitat package directly on a series of virtual machines.

   blockquote
    p <b>Note</b> This section does not specify where your virtual machines are running; however, these instructions should be applicable whether you are running on-prem or in the cloud.

   p Part of running the cluster is to set up a leader-follower topology where interactions between your web application and the database cluster happen primarily on a leader node with replication activities happening on follower nodes.

   p Habitat has built-in support for leader-follower topology, so functions like leader election will be done with minimal effort from you.

   p The first step is to install the Habitat CLI onto each machine and then add the <code>hab</code> user and group to the machine. Because currently most Habitat packages run in Linux environments natively, each of your machines should be running a Linux distributon with the kernel greater than or equal to 2.6.32.

   = code(:shell) do
     |
      $ curl https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash
      $ sudo groupadd hab
      $ sudo useradd -g hab hab

   p Now, in one of these three instances, run the following command to both install <code>core/postgresql</code> and start a Supervisor ring:

   = code(:shell) do
     | 
      $ sudo hab sup run core/postgresql --topology leader --group production

   p Then, in each of the other two instances, run this command:

   = code(:shell) do
   |
    $ sudo hab sup run core/postgresql --topology leader --group production --peer first_instance_public_ip_address

   p This will connect them with the first instance and create a Supervisor ring. When all three are up, you will see them hold an election and select a leader.

   p To connect your web application to the cluster, you need to know which instance is the leader, and the leader ID might be difficult to find. Fortunately, there is a way to look it up.

   p Pick the public IP of one of those three instances then head to your browser and navigate to http://your_instance_public_ip:9631/census.

   p Search for the id of the leader. That will bring you to information about that particular Supervisor. Look for the ip address - this is the private IP of the instance that is the leader.

   p Now, match that private IP to one of your instances and then copy the public IP of that instance.

   p Open up <code>habitat/default.toml</code> and replace the value for the <code>host</code> key with that public ip address. 
   
   blockquote
    p <b>Note</b> It does need to be the public ip of the leader in order to work.

   = code(:toml, title: 'habitat/default.toml') do
     |
      [db]
      user = "admin"
      password = "admin"
      host = "leader_public_ip_address"

   p Now re-enter back the Studio, build your package again, and then export that new package into a docker image.

   = code(:shell) do
     |
      $ hab studio enter

   = code(:studio) do
     |
      # build
      # hab pkg export docker ./results/<hart-filename>.hart && exit

   p Run the docker container for your web application.

   = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_docker_run"

   p As part of the general workflow of using your web app, you need to setup the database from your web application container. 

   = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_db_setup"

   h2 <a name="connect-rds">Connecting to an Amazon RDS Database</a>

   p Cloud database services like Amazon RDS can also be used with your web application. The first step you need to take is to #{link_to 'create a PostgreSQL DB instance', 'http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_GettingStarted.CreatingConnecting.PostgreSQL.html#CHAP_GettingStarted.Creating.PostgreSQL'} in RDS.

   p Default values are fine, but make sure to note what you set these two values as:

   = code(:plaintext) do
     |
      master username
      master password

   p RDS instances can sometimes take awhile to spin up. Wait until it is ready before moving onto the next instructions.

   p Once the RDS instance is up, update the <code>habitat/default.toml</code> file in your local project repo.

   p Modify it so that the <code>db.user</code> matches the username you set for your RDS instance and the <code>db.password</code> matches the password you set for your RDS instance. Finally, you also need to add in <code>db.host</code> and set it to the endpoint for your RDS instance (you can get this from the AWS GUI or cli). Do not include the port number in the endpoint. The value should be "https://my_endpoint" not "https://my_endpoint:5432". 

   = code(:toml, title: 'habitat/default.toml') do
     |
      [db]
      user = "rds_instance_username"
      password = "rds_instance_password"
      host = "rds_endpoint_without_port"

   p Save <code>habitat/default.toml</code>, re-enter the Studio, build your package, and export that newly built package as a Docker image.

   = code(:shell) do
     |
      $ hab studio enter

   = code(:studio) do
     |
      # build
      # hab pkg export docker ./results/<hart-filename>.hart && exit

   p Because you're not interacting with another Habitat package as in the previous section, you do not need to set the service binding or join a ring with another service. Simply run the Docker container for your web application and set an exposed port so you can browse to your web application from your local workstation
   
   = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_docker_run"

   p And just as in the previous section, you need to setup the database from your web application container. 

   = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_db_setup"

- if "#{current_page.data.platform_short}" == "aspnet-core"
  = link_to 'Next: Next Steps', "/tutorials/build-your-own/#{current_page.data.platform_short}/next-steps/", class: 'button cta'
- else
  = link_to 'Next: Connect to Nginx', "/tutorials/build-your-own/#{current_page.data.platform_short}/connect-nginx/", class: 'button cta'
